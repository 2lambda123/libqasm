version(3.0)

# Define a quantum register of 9 qubits
qubit[9] q

oracle = q[4]

# Sub-circuit for state initialization
> init
    x(oracle)
    h(q[0]) h(q[1]) h(q[2]) h(q[3]) h(oracle)

# Core step of Groverâ€™s algorithm
# Loop with 3 iterations
> grover
for (int i = 0; i < 3; i++) {
    # Search for |x> = |0100>
    # Oracle implementation
    x(q[2])
    toffoli(q[0], q[1], q[5])
    toffoli(q[1], q[5], q[6]) /* test of
        multiline
    comments */
    #blabla
    toffoli(q[2], q[6], q[7])
    toffoli(q[3], q[7], q[8])
    cnot(q[8], oracle)
    toffoli(q[3], q[7], q[8])
    toffoli(q[2], q[6], q[7])
    toffoli(q[1], q[5], q[6])
    toffoli(q[0], q[1], q[5])
    x(q[2])

    # Grover diffusion operator
    h(q[0]) h(q[1]) h(q[2]) h(q[3])
    x(q[0]) x(q[1]) x(q[2]) x(q[3])
    h(q[3])
    toffoli(q[0], q[1], q[5])
    toffoli(q[1], q[5], q[6])
    toffoli(q[2], q[6], q[7])
    cnot(q[7], q[3])
    toffoli(q[2], q[6], q[7])
    toffoli(q[1], q[5], q[6])
    toffoli(q[0], q[1], q[5])
    h(q[3])
    x(q[0]) x(q[1]) x(q[2]) x(q[3])
    h(q[0]) h(q[1]) h(q[2]) h(q[3])
    @qx_emulator.display
}

# Final measurement
> final_measurement
    h(oracle)
    bit b = measure(oracle)
    b @qx_emulator.display

# @qx_emulator.error_model(depolarizing_channel, 0.001)
