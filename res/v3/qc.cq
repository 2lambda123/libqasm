version(3.0)

#foo
#bar

qubit[8] q  # foo

bleh2 = q[0,2:4,6]
bleh = b[5:7]

prep_z(q[5])
@qx_emulator.reset-AveraGing
Q[1,4,6] @qx_emulator.reset-Averaging

measure_all
measure_parity((q[2:5], q[0]), (x, z))

x(q[4:7])

rX q[1,2:5], 3.1416E-01

> mapping
bitcontroller = b[0:11]
q0 = q[0]
q1 = q[1]
q2 = q[2]
q3 = q[3]
q4 = q[4]
q5 = q[5]
q6 = q[6]
q7 = q[7]

> waits
    wait(q[0:7], 2)

> first_circuit
for (int i = 0; i < 50; i++) {
    h(q0)
    cnot(q0, q1)
    x(q1)
    Y(q2)
    z(q6)
    x(q3)
    h(q7)
    if (bitcontroller), {
        x(bleh2)
     }
    if (b[4]) {
        toffoli(q3, q4, q5)
    }
}

> second_circuit
    rx(q4, -0.453e1)
    ry(q5, 0.244)
    rz(q6, 0.555)
    if (bitcontroller) {
        x(q[2:5])
    }
    if (b[7]) {
        swap(q1, q[5])
    }
    toffoli(q3, q4, q[0])
    crk q1, q6, 4
    crk q2, q3, -10
    cr q2, q5, 3.1416
    U q1, [1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]

> result
# Measurement
    b1 = measure(q1)
    (b0, b2, b3) = measure((q0, q2, q3))

> display_results
@qx_emulator.display
b[1] @qx_emulator.display
b[6] @qx_emulator.display_binary
@qx_emulator.display_binary

load_state "test.qc"

bleh @qx_emulator.display
@qx_emulator.error_model(depolarizing_channel, 0.001, 0.1, 3.4)
