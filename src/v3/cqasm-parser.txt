Terminals unused in grammar

    BAD_NUMBER
    BAD_CHARACTER
    END_OF_FILE


Grammar

    0 $accept: Root $end

    1 Newline: Newline NEWLINE
    2        | NEWLINE

    3 OptNewline: Newline
    4           | ε

    5 IntegerLiteral: INT_LITERAL

    6 FloatLiteral: FLOAT_LITERAL

    7 MatrixRows: MatrixRows Newline ExpressionList
    8           | ExpressionList

    9 MatrixLiteral: '[' OptNewline MatrixRows OptNewline ']'
   10              | '[' OptNewline ']'

   11 StringBuilder: StringBuilder STRBUILD_APPEND
   12              | StringBuilder STRBUILD_ESCAPE
   13              | ε

   14 StringLiteral: STRING_OPEN StringBuilder STRING_CLOSE

   15 JsonLiteral: JSON_OPEN StringBuilder JSON_CLOSE

   16 Identifier: IDENTIFIER

   17 FunctionCall: Identifier '(' ')'
   18             | Identifier '(' ExpressionList ')'

   19 IndexItem: Expression

   20 IndexRange: Expression ':' Expression

   21 IndexEntry: IndexItem
   22           | IndexRange

   23 IndexList: IndexList ',' IndexEntry
   24          | IndexEntry

   25 Index: Expression '[' IndexList ']'

   26 IndexNP: ExpressionNP '[' IndexList ']'

   27 UnaryOp: '-' Expression
   28        | '~' Expression
   29        | '!' Expression

   30 BinaryOp: Expression POWER Expression
   31         | Expression '*' Expression
   32         | Expression '/' Expression
   33         | Expression INT_DIV Expression
   34         | Expression '%' Expression
   35         | Expression '+' Expression
   36         | Expression '-' Expression
   37         | Expression SHL Expression
   38         | Expression ARITH_SHR Expression
   39         | Expression LOGIC_SHR Expression
   40         | Expression CMP_EQ Expression
   41         | Expression CMP_NE Expression
   42         | Expression '>' Expression
   43         | Expression CMP_GE Expression
   44         | Expression '<' Expression
   45         | Expression CMP_LE Expression
   46         | Expression '&' Expression
   47         | Expression '^' Expression
   48         | Expression '|' Expression
   49         | Expression LOGIC_AND Expression
   50         | Expression LOGIC_XOR Expression
   51         | Expression LOGIC_OR Expression

   52 TernaryOp: Expression '?' Expression ':' Expression

   53 UnaryOpNP: '-' ExpressionNP
   54          | '~' ExpressionNP
   55          | '!' ExpressionNP

   56 BinaryOpNP: ExpressionNP POWER ExpressionNP
   57           | ExpressionNP '*' ExpressionNP
   58           | ExpressionNP '/' ExpressionNP
   59           | ExpressionNP INT_DIV ExpressionNP
   60           | ExpressionNP '%' ExpressionNP
   61           | ExpressionNP '+' ExpressionNP
   62           | ExpressionNP '-' ExpressionNP
   63           | ExpressionNP SHL ExpressionNP
   64           | ExpressionNP ARITH_SHR ExpressionNP
   65           | ExpressionNP LOGIC_SHR ExpressionNP
   66           | ExpressionNP CMP_EQ ExpressionNP
   67           | ExpressionNP CMP_NE ExpressionNP
   68           | ExpressionNP '>' ExpressionNP
   69           | ExpressionNP CMP_GE ExpressionNP
   70           | ExpressionNP '<' ExpressionNP
   71           | ExpressionNP CMP_LE ExpressionNP
   72           | ExpressionNP '&' ExpressionNP
   73           | ExpressionNP '^' ExpressionNP
   74           | ExpressionNP LOGIC_AND ExpressionNP
   75           | ExpressionNP LOGIC_XOR ExpressionNP
   76           | ExpressionNP LOGIC_OR ExpressionNP

   77 TernaryOpNP: ExpressionNP '?' ExpressionNP ':' ExpressionNP

   78 Expression: IntegerLiteral
   79           | FloatLiteral
   80           | MatrixLiteral
   81           | StringLiteral
   82           | JsonLiteral
   83           | Identifier
   84           | FunctionCall
   85           | Index
   86           | UnaryOp
   87           | BinaryOp
   88           | TernaryOp
   89           | '(' Expression ')'
   90           | error

   91 ExpressionNP: IntegerLiteral
   92             | FloatLiteral
   93             | MatrixLiteral
   94             | StringLiteral
   95             | JsonLiteral
   96             | Identifier
   97             | FunctionCall
   98             | IndexNP
   99             | UnaryOpNP
  100             | BinaryOpNP
  101             | TernaryOpNP
  102             | '(' Expression ')'
  103             | error

  104 ExpressionList: ExpressionList ',' Expression
  105               | Expression

  106 ExpressionListNP: ExpressionListNP ',' ExpressionNP
  107                 | ExpressionNP

  108 AnnotationName: Identifier '.' Identifier

  109 AnnotationData: AnnotationName
  110               | AnnotationName '(' ')'
  111               | AnnotationName '(' ExpressionList ')'

  112 Instruction: Identifier
  113            | Identifier ExpressionListNP
  114            | SET ExpressionNP '=' ExpressionNP
  115            | CDASH Identifier ExpressionNP
  116            | CDASH Identifier ExpressionNP ',' ExpressionListNP
  117            | COND '(' Expression ')' Identifier ExpressionListNP

  118 AnnotInstr: AnnotInstr '@' AnnotationData
  119           | Instruction

  120 SLParInstrList: SLParInstrList '|' AnnotInstr
  121               | AnnotInstr

  122 CBParInstrList: CBParInstrList Newline SLParInstrList
  123               | SLParInstrList

  124 Mapping: MAP Expression ',' Identifier
  125        | MAP Identifier '=' Expression

  126 VariableBody: Identifier ':' Identifier
  127             | Identifier ',' VariableBody

  128 Variable: VAR VariableBody

  129 Subcircuit: '.' Identifier
  130           | '.' Identifier '(' Expression ')'

  131 SubStatements: '{' OptNewline StatementList OptNewline '}'
  132              | '{' OptNewline '}'

  133 Assignment: Expression '=' Expression

  134 OptAssignment: Assignment
  135              | ε

  136 IfElse: IF '(' Expression ')' SubStatements
  137       | IF '(' Expression ')' SubStatements ELSE IfElse
  138       | IF '(' Expression ')' SubStatements ELSE SubStatements

  139 ForLoop: FOR '(' OptAssignment NEWLINE Expression NEWLINE OptAssignment ')' SubStatements

  140 ForeachLoop: FOREACH '(' Expression '=' Expression ELLIPSIS Expression ')' SubStatements

  141 WhileLoop: WHILE '(' Expression ')' SubStatements

  142 RepeatUntilLoop: REPEAT SubStatements UNTIL '(' Expression ')'

  143 Continue: CONTINUE

  144 Break: BREAK

  145 Statement: Mapping
  146          | Variable
  147          | Subcircuit
  148          | SLParInstrList
  149          | '{' OptNewline CBParInstrList OptNewline '}'
  150          | IfElse
  151          | ForLoop
  152          | ForeachLoop
  153          | WhileLoop
  154          | RepeatUntilLoop
  155          | Continue
  156          | Break
  157          | error

  158 AnnotStatement: AnnotStatement '@' AnnotationData
  159               | Statement

  160 StatementList: StatementList Newline AnnotStatement
  161              | AnnotStatement

  162 Statements: Newline StatementList OptNewline
  163           | OptNewline

  164 Version: Version '.' IntegerLiteral
  165        | IntegerLiteral

  166 Program: OptNewline VERSION Version Newline QUBITS Expression Statements
  167        | OptNewline VERSION Version Statements

  168 Root: Program
  169     | error


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 29 55
    '%' (37) 34 60
    '&' (38) 46 72
    '(' (40) 17 18 89 102 110 111 117 130 136 137 138 139 140 141 142
    ')' (41) 17 18 89 102 110 111 117 130 136 137 138 139 140 141 142
    '*' (42) 31 57
    '+' (43) 35 61
    ',' (44) 23 104 106 116 124 127
    '-' (45) 27 36 53 62
    '.' (46) 108 129 130 164
    '/' (47) 32 58
    ':' (58) 20 52 77 126
    '<' (60) 44 70
    '=' (61) 114 125 133 140
    '>' (62) 42 68
    '?' (63) 52 77
    '@' (64) 118 158
    '[' (91) 9 10 25 26
    ']' (93) 9 10 25 26
    '^' (94) 47 73
    '{' (123) 131 132 149
    '|' (124) 48 120
    '}' (125) 131 132 149
    '~' (126) 28 54
    error (256) 90 103 157 169
    NEWLINE (258) 1 2 139
    VERSION (259) 166 167
    QUBITS (260) 166
    MAP (261) 124 125
    VAR (262) 128
    CDASH (263) 115 116
    COND (264) 117
    IF (265) 136 137 138
    ELSE (266) 137 138
    FOR (267) 139
    FOREACH (268) 140
    WHILE (269) 141
    REPEAT (270) 142
    UNTIL (271) 142
    CONTINUE (272) 143
    BREAK (273) 144
    SET (274) 114
    INT_LITERAL <str> (275) 5
    FLOAT_LITERAL <str> (276) 6
    BAD_NUMBER (277)
    STRING_OPEN (278) 14
    STRING_CLOSE (279) 14
    JSON_OPEN (280) 15
    JSON_CLOSE (281) 15
    STRBUILD_APPEND <str> (282) 11
    STRBUILD_ESCAPE <str> (283) 12
    IDENTIFIER <str> (284) 16
    POWER (285) 30 56
    INT_DIV (286) 33 59
    LOGIC_OR (287) 51 76
    LOGIC_AND (288) 49 74
    LOGIC_XOR (289) 50 75
    CMP_GE (290) 43 69
    CMP_LE (291) 45 71
    CMP_EQ (292) 40 66
    CMP_NE (293) 41 67
    SHL (294) 37 63
    ARITH_SHR (295) 38 64
    LOGIC_SHR (296) 39 65
    ELLIPSIS (297) 140
    BAD_CHARACTER (298)
    END_OF_FILE (299)
    UMINUS (300)
    UCOMP (301)
    UNOT (302)


Nonterminals, with rules where they appear

    $accept (72)
        on left: 0
    Newline (73)
        on left: 1 2
        on right: 1 3 7 122 160 162 166
    OptNewline (74)
        on left: 3 4
        on right: 9 10 131 132 149 162 163 166 167
    IntegerLiteral <ilit> (75)
        on left: 5
        on right: 78 91 164 165
    FloatLiteral <flit> (76)
        on left: 6
        on right: 79 92
    MatrixRows <mat> (77)
        on left: 7 8
        on right: 7 9
    MatrixLiteral <mat> (78)
        on left: 9 10
        on right: 80 93
    StringBuilder <strb> (79)
        on left: 11 12 13
        on right: 11 12 14 15
    StringLiteral <slit> (80)
        on left: 14
        on right: 81 94
    JsonLiteral <jlit> (81)
        on left: 15
        on right: 82 95
    Identifier <idnt> (82)
        on left: 16
        on right: 17 18 83 96 108 112 113 115 116 117 124 125 126 127 129 130
    FunctionCall <func> (83)
        on left: 17 18
        on right: 84 97
    IndexItem <idxi> (84)
        on left: 19
        on right: 21
    IndexRange <idxr> (85)
        on left: 20
        on right: 22
    IndexEntry <idxe> (86)
        on left: 21 22
        on right: 23 24
    IndexList <idxl> (87)
        on left: 23 24
        on right: 23 25 26
    Index <indx> (88)
        on left: 25
        on right: 85
    IndexNP <indx> (89)
        on left: 26
        on right: 98
    UnaryOp <unop> (90)
        on left: 27 28 29
        on right: 86
    BinaryOp <biop> (91)
        on left: 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51
        on right: 87
    TernaryOp <tcnd> (92)
        on left: 52
        on right: 88
    UnaryOpNP <unop> (93)
        on left: 53 54 55
        on right: 99
    BinaryOpNP <biop> (94)
        on left: 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76
        on right: 100
    TernaryOpNP <tcnd> (95)
        on left: 77
        on right: 101
    Expression <expr> (96)
        on left: 78 79 80 81 82 83 84 85 86 87 88 89 90
        on right: 19 20 25 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 89 102 104 105 117 124 125 130 133 136 137 138 139 140 141 142 166
    ExpressionNP <expr> (97)
        on left: 91 92 93 94 95 96 97 98 99 100 101 102 103
        on right: 26 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 106 107 114 115 116
    ExpressionList <expl> (98)
        on left: 104 105
        on right: 7 8 18 104 111
    ExpressionListNP <expl> (99)
        on left: 106 107
        on right: 106 113 116 117
    AnnotationName <adat> (100)
        on left: 108
        on right: 109 110 111
    AnnotationData <adat> (101)
        on left: 109 110 111
        on right: 118 158
    Instruction <inst> (102)
        on left: 112 113 114 115 116 117
        on right: 119
    AnnotInstr <inst> (103)
        on left: 118 119
        on right: 118 120 121
    SLParInstrList <bun> (104)
        on left: 120 121
        on right: 120 122 123 148
    CBParInstrList <bun> (105)
        on left: 122 123
        on right: 122 149
    Mapping <map> (106)
        on left: 124 125
        on right: 145
    VariableBody <vars> (107)
        on left: 126 127
        on right: 127 128
    Variable <vars> (108)
        on left: 128
        on right: 146
    Subcircuit <sub> (109)
        on left: 129 130
        on right: 147
    SubStatements <stms> (110)
        on left: 131 132
        on right: 136 137 138 139 140 141 142
    Assignment <asgn> (111)
        on left: 133
        on right: 134
    OptAssignment <asgn> (112)
        on left: 134 135
        on right: 139
    IfElse <ifel> (113)
        on left: 136 137 138
        on right: 137 150
    ForLoop <forl> (114)
        on left: 139
        on right: 151
    ForeachLoop <fore> (115)
        on left: 140
        on right: 152
    WhileLoop <whil> (116)
        on left: 141
        on right: 153
    RepeatUntilLoop <repu> (117)
        on left: 142
        on right: 154
    Continue <cont> (118)
        on left: 143
        on right: 155
    Break <brk> (119)
        on left: 144
        on right: 156
    Statement <stmt> (120)
        on left: 145 146 147 148 149 150 151 152 153 154 155 156 157
        on right: 159
    AnnotStatement <stmt> (121)
        on left: 158 159
        on right: 158 160 161
    StatementList <stms> (122)
        on left: 160 161
        on right: 131 160 162
    Statements <stms> (123)
        on left: 162 163
        on right: 166 167
    Version <vers> (124)
        on left: 164 165
        on right: 164 166 167
    Program <prog> (125)
        on left: 166 167
        on right: 168
    Root (126)
        on left: 168 169
        on right: 0


State 0

    0 $accept: • Root $end
    1 Newline: • Newline NEWLINE
    2        | • NEWLINE
    3 OptNewline: • Newline
    4           | ε •  [VERSION]
  166 Program: • OptNewline VERSION Version Newline QUBITS Expression Statements
  167        | • OptNewline VERSION Version Statements
  168 Root: • Program
  169     | • error

    error    shift, and go to state 1
    NEWLINE  shift, and go to state 2

    VERSION  reduce using rule 4 (OptNewline)

    Newline     go to state 3
    OptNewline  go to state 4
    Program     go to state 5
    Root        go to state 6


State 1

  169 Root: error •

    $default  reduce using rule 169 (Root)


State 2

    2 Newline: NEWLINE •

    $default  reduce using rule 2 (Newline)


State 3

    1 Newline: Newline • NEWLINE
    3 OptNewline: Newline •  [error, VERSION, MAP, VAR, CDASH, COND, IF, FOR, FOREACH, WHILE, REPEAT, CONTINUE, BREAK, SET, INT_LITERAL, FLOAT_LITERAL, STRING_OPEN, JSON_OPEN, IDENTIFIER, '-', '(', '[', ']', '~', '!', '.', '{', '}']

    NEWLINE  shift, and go to state 7

    $default  reduce using rule 3 (OptNewline)


State 4

  166 Program: OptNewline • VERSION Version Newline QUBITS Expression Statements
  167        | OptNewline • VERSION Version Statements

    VERSION  shift, and go to state 8


State 5

  168 Root: Program •

    $default  reduce using rule 168 (Root)


State 6

    0 $accept: Root • $end

    $end  shift, and go to state 9


State 7

    1 Newline: Newline NEWLINE •

    $default  reduce using rule 1 (Newline)


State 8

    5 IntegerLiteral: • INT_LITERAL
  164 Version: • Version '.' IntegerLiteral
  165        | • IntegerLiteral
  166 Program: OptNewline VERSION • Version Newline QUBITS Expression Statements
  167        | OptNewline VERSION • Version Statements

    INT_LITERAL  shift, and go to state 10

    IntegerLiteral  go to state 11
    Version         go to state 12


State 9

    0 $accept: Root $end •

    $default  accept


State 10

    5 IntegerLiteral: INT_LITERAL •

    $default  reduce using rule 5 (IntegerLiteral)


State 11

  165 Version: IntegerLiteral •

    $default  reduce using rule 165 (Version)


State 12

    1 Newline: • Newline NEWLINE
    2        | • NEWLINE
    3 OptNewline: • Newline
    4           | ε •  [$end]
  162 Statements: • Newline StatementList OptNewline
  163           | • OptNewline
  164 Version: Version • '.' IntegerLiteral
  166 Program: OptNewline VERSION Version • Newline QUBITS Expression Statements
  167        | OptNewline VERSION Version • Statements

    NEWLINE  shift, and go to state 2
    '.'      shift, and go to state 13

    $default  reduce using rule 4 (OptNewline)

    Newline     go to state 14
    OptNewline  go to state 15
    Statements  go to state 16


State 13

    5 IntegerLiteral: • INT_LITERAL
  164 Version: Version '.' • IntegerLiteral

    INT_LITERAL  shift, and go to state 10

    IntegerLiteral  go to state 17


State 14

    1 Newline: Newline • NEWLINE
    3 OptNewline: Newline •  [$end]
   16 Identifier: • IDENTIFIER
  112 Instruction: • Identifier
  113            | • Identifier ExpressionListNP
  114            | • SET ExpressionNP '=' ExpressionNP
  115            | • CDASH Identifier ExpressionNP
  116            | • CDASH Identifier ExpressionNP ',' ExpressionListNP
  117            | • COND '(' Expression ')' Identifier ExpressionListNP
  118 AnnotInstr: • AnnotInstr '@' AnnotationData
  119           | • Instruction
  120 SLParInstrList: • SLParInstrList '|' AnnotInstr
  121               | • AnnotInstr
  124 Mapping: • MAP Expression ',' Identifier
  125        | • MAP Identifier '=' Expression
  128 Variable: • VAR VariableBody
  129 Subcircuit: • '.' Identifier
  130           | • '.' Identifier '(' Expression ')'
  136 IfElse: • IF '(' Expression ')' SubStatements
  137       | • IF '(' Expression ')' SubStatements ELSE IfElse
  138       | • IF '(' Expression ')' SubStatements ELSE SubStatements
  139 ForLoop: • FOR '(' OptAssignment NEWLINE Expression NEWLINE OptAssignment ')' SubStatements
  140 ForeachLoop: • FOREACH '(' Expression '=' Expression ELLIPSIS Expression ')' SubStatements
  141 WhileLoop: • WHILE '(' Expression ')' SubStatements
  142 RepeatUntilLoop: • REPEAT SubStatements UNTIL '(' Expression ')'
  143 Continue: • CONTINUE
  144 Break: • BREAK
  145 Statement: • Mapping
  146          | • Variable
  147          | • Subcircuit
  148          | • SLParInstrList
  149          | • '{' OptNewline CBParInstrList OptNewline '}'
  150          | • IfElse
  151          | • ForLoop
  152          | • ForeachLoop
  153          | • WhileLoop
  154          | • RepeatUntilLoop
  155          | • Continue
  156          | • Break
  157          | • error
  158 AnnotStatement: • AnnotStatement '@' AnnotationData
  159               | • Statement
  160 StatementList: • StatementList Newline AnnotStatement
  161              | • AnnotStatement
  162 Statements: Newline • StatementList OptNewline
  166 Program: OptNewline VERSION Version Newline • QUBITS Expression Statements

    error       shift, and go to state 18
    NEWLINE     shift, and go to state 7
    QUBITS      shift, and go to state 19
    MAP         shift, and go to state 20
    VAR         shift, and go to state 21
    CDASH       shift, and go to state 22
    COND        shift, and go to state 23
    IF          shift, and go to state 24
    FOR         shift, and go to state 25
    FOREACH     shift, and go to state 26
    WHILE       shift, and go to state 27
    REPEAT      shift, and go to state 28
    CONTINUE    shift, and go to state 29
    BREAK       shift, and go to state 30
    SET         shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    '.'         shift, and go to state 33
    '{'         shift, and go to state 34

    $end  reduce using rule 3 (OptNewline)

    Identifier       go to state 35
    Instruction      go to state 36
    AnnotInstr       go to state 37
    SLParInstrList   go to state 38
    Mapping          go to state 39
    Variable         go to state 40
    Subcircuit       go to state 41
    IfElse           go to state 42
    ForLoop          go to state 43
    ForeachLoop      go to state 44
    WhileLoop        go to state 45
    RepeatUntilLoop  go to state 46
    Continue         go to state 47
    Break            go to state 48
    Statement        go to state 49
    AnnotStatement   go to state 50
    StatementList    go to state 51


State 15

  163 Statements: OptNewline •

    $default  reduce using rule 163 (Statements)


State 16

  167 Program: OptNewline VERSION Version Statements •

    $default  reduce using rule 167 (Program)


State 17

  164 Version: Version '.' IntegerLiteral •

    $default  reduce using rule 164 (Version)


State 18

  157 Statement: error •

    $default  reduce using rule 157 (Statement)


State 19

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  166 Program: OptNewline VERSION Version Newline QUBITS • Expression Statements

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 72


State 20

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  124 Mapping: MAP • Expression ',' Identifier
  125        | MAP • Identifier '=' Expression

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 73
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 74


State 21

   16 Identifier: • IDENTIFIER
  126 VariableBody: • Identifier ':' Identifier
  127             | • Identifier ',' VariableBody
  128 Variable: VAR • VariableBody

    IDENTIFIER  shift, and go to state 32

    Identifier    go to state 75
    VariableBody  go to state 76


State 22

   16 Identifier: • IDENTIFIER
  115 Instruction: CDASH • Identifier ExpressionNP
  116            | CDASH • Identifier ExpressionNP ',' ExpressionListNP

    IDENTIFIER  shift, and go to state 32

    Identifier  go to state 77


State 23

  117 Instruction: COND • '(' Expression ')' Identifier ExpressionListNP

    '('  shift, and go to state 78


State 24

  136 IfElse: IF • '(' Expression ')' SubStatements
  137       | IF • '(' Expression ')' SubStatements ELSE IfElse
  138       | IF • '(' Expression ')' SubStatements ELSE SubStatements

    '('  shift, and go to state 79


State 25

  139 ForLoop: FOR • '(' OptAssignment NEWLINE Expression NEWLINE OptAssignment ')' SubStatements

    '('  shift, and go to state 80


State 26

  140 ForeachLoop: FOREACH • '(' Expression '=' Expression ELLIPSIS Expression ')' SubStatements

    '('  shift, and go to state 81


State 27

  141 WhileLoop: WHILE • '(' Expression ')' SubStatements

    '('  shift, and go to state 82


State 28

  131 SubStatements: • '{' OptNewline StatementList OptNewline '}'
  132              | • '{' OptNewline '}'
  142 RepeatUntilLoop: REPEAT • SubStatements UNTIL '(' Expression ')'

    '{'  shift, and go to state 83

    SubStatements  go to state 84


State 29

  143 Continue: CONTINUE •

    $default  reduce using rule 143 (Continue)


State 30

  144 Break: BREAK •

    $default  reduce using rule 144 (Break)


State 31

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error
  114 Instruction: SET • ExpressionNP '=' ExpressionNP

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 101


State 32

   16 Identifier: IDENTIFIER •

    $default  reduce using rule 16 (Identifier)


State 33

   16 Identifier: • IDENTIFIER
  129 Subcircuit: '.' • Identifier
  130           | '.' • Identifier '(' Expression ')'

    IDENTIFIER  shift, and go to state 32

    Identifier  go to state 102


State 34

    1 Newline: • Newline NEWLINE
    2        | • NEWLINE
    3 OptNewline: • Newline
    4           | ε •  [CDASH, COND, SET, IDENTIFIER]
  149 Statement: '{' • OptNewline CBParInstrList OptNewline '}'

    NEWLINE  shift, and go to state 2

    $default  reduce using rule 4 (OptNewline)

    Newline     go to state 3
    OptNewline  go to state 103


State 35

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error
  106 ExpressionListNP: • ExpressionListNP ',' ExpressionNP
  107                 | • ExpressionNP
  112 Instruction: Identifier •  [$end, NEWLINE, '|', '@', '}']
  113            | Identifier • ExpressionListNP

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    $end     reduce using rule 112 (Instruction)
    NEWLINE  reduce using rule 112 (Instruction)
    '|'      reduce using rule 112 (Instruction)
    '@'      reduce using rule 112 (Instruction)
    '}'      reduce using rule 112 (Instruction)

    IntegerLiteral    go to state 90
    FloatLiteral      go to state 91
    MatrixLiteral     go to state 92
    StringLiteral     go to state 93
    JsonLiteral       go to state 94
    Identifier        go to state 95
    FunctionCall      go to state 96
    IndexNP           go to state 97
    UnaryOpNP         go to state 98
    BinaryOpNP        go to state 99
    TernaryOpNP       go to state 100
    ExpressionNP      go to state 104
    ExpressionListNP  go to state 105


State 36

  119 AnnotInstr: Instruction •

    $default  reduce using rule 119 (AnnotInstr)


State 37

  118 AnnotInstr: AnnotInstr • '@' AnnotationData
  121 SLParInstrList: AnnotInstr •  [$end, NEWLINE, '|', '}']

    '@'  shift, and go to state 106

    $default  reduce using rule 121 (SLParInstrList)

    Conflict between rule 121 and token '@' resolved as shift ('|' < '@').


State 38

  120 SLParInstrList: SLParInstrList • '|' AnnotInstr
  148 Statement: SLParInstrList •  [$end, NEWLINE, '@', '}']

    '|'  shift, and go to state 107

    $default  reduce using rule 148 (Statement)


State 39

  145 Statement: Mapping •

    $default  reduce using rule 145 (Statement)


State 40

  146 Statement: Variable •

    $default  reduce using rule 146 (Statement)


State 41

  147 Statement: Subcircuit •

    $default  reduce using rule 147 (Statement)


State 42

  150 Statement: IfElse •

    $default  reduce using rule 150 (Statement)


State 43

  151 Statement: ForLoop •

    $default  reduce using rule 151 (Statement)


State 44

  152 Statement: ForeachLoop •

    $default  reduce using rule 152 (Statement)


State 45

  153 Statement: WhileLoop •

    $default  reduce using rule 153 (Statement)


State 46

  154 Statement: RepeatUntilLoop •

    $default  reduce using rule 154 (Statement)


State 47

  155 Statement: Continue •

    $default  reduce using rule 155 (Statement)


State 48

  156 Statement: Break •

    $default  reduce using rule 156 (Statement)


State 49

  159 AnnotStatement: Statement •

    $default  reduce using rule 159 (AnnotStatement)


State 50

  158 AnnotStatement: AnnotStatement • '@' AnnotationData
  161 StatementList: AnnotStatement •  [$end, NEWLINE, '}']

    '@'  shift, and go to state 108

    $default  reduce using rule 161 (StatementList)


State 51

    1 Newline: • Newline NEWLINE
    2        | • NEWLINE
    3 OptNewline: • Newline
    4           | ε •  [$end]
  160 StatementList: StatementList • Newline AnnotStatement
  162 Statements: Newline StatementList • OptNewline

    NEWLINE  shift, and go to state 2

    $default  reduce using rule 4 (OptNewline)

    Newline     go to state 109
    OptNewline  go to state 110


State 52

   90 Expression: error •

    $default  reduce using rule 90 (Expression)


State 53

    6 FloatLiteral: FLOAT_LITERAL •

    $default  reduce using rule 6 (FloatLiteral)


State 54

   11 StringBuilder: • StringBuilder STRBUILD_APPEND
   12              | • StringBuilder STRBUILD_ESCAPE
   13              | ε •
   14 StringLiteral: STRING_OPEN • StringBuilder STRING_CLOSE

    $default  reduce using rule 13 (StringBuilder)

    StringBuilder  go to state 111


State 55

   11 StringBuilder: • StringBuilder STRBUILD_APPEND
   12              | • StringBuilder STRBUILD_ESCAPE
   13              | ε •
   15 JsonLiteral: JSON_OPEN • StringBuilder JSON_CLOSE

    $default  reduce using rule 13 (StringBuilder)

    StringBuilder  go to state 112


State 56

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   27        | '-' • Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 113


State 57

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   89           | '(' • Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 114


State 58

    1 Newline: • Newline NEWLINE
    2        | • NEWLINE
    3 OptNewline: • Newline
    4           | ε •  [error, INT_LITERAL, FLOAT_LITERAL, STRING_OPEN, JSON_OPEN, IDENTIFIER, '-', '(', '[', ']', '~', '!']
    9 MatrixLiteral: '[' • OptNewline MatrixRows OptNewline ']'
   10              | '[' • OptNewline ']'

    NEWLINE  shift, and go to state 2

    $default  reduce using rule 4 (OptNewline)

    Newline     go to state 3
    OptNewline  go to state 115


State 59

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   28        | '~' • Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 116


State 60

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   29        | '!' • Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 117


State 61

   78 Expression: IntegerLiteral •

    $default  reduce using rule 78 (Expression)


State 62

   79 Expression: FloatLiteral •

    $default  reduce using rule 79 (Expression)


State 63

   80 Expression: MatrixLiteral •

    $default  reduce using rule 80 (Expression)


State 64

   81 Expression: StringLiteral •

    $default  reduce using rule 81 (Expression)


State 65

   82 Expression: JsonLiteral •

    $default  reduce using rule 82 (Expression)


State 66

   17 FunctionCall: Identifier • '(' ')'
   18             | Identifier • '(' ExpressionList ')'
   83 Expression: Identifier •  [$end, NEWLINE, POWER, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '[', '@', ']', ')', '=', '}']

    '('  shift, and go to state 118

    $default  reduce using rule 83 (Expression)


State 67

   84 Expression: FunctionCall •

    $default  reduce using rule 84 (Expression)


State 68

   85 Expression: Index •

    $default  reduce using rule 85 (Expression)


State 69

   86 Expression: UnaryOp •

    $default  reduce using rule 86 (Expression)


State 70

   87 Expression: BinaryOp •

    $default  reduce using rule 87 (Expression)


State 71

   88 Expression: TernaryOp •

    $default  reduce using rule 88 (Expression)


State 72

    1 Newline: • Newline NEWLINE
    2        | • NEWLINE
    3 OptNewline: • Newline
    4           | ε •  [$end]
   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  162 Statements: • Newline StatementList OptNewline
  163           | • OptNewline
  166 Program: OptNewline VERSION Version Newline QUBITS Expression • Statements

    NEWLINE    shift, and go to state 2
    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 4 (OptNewline)

    Newline     go to state 143
    OptNewline  go to state 15
    Statements  go to state 144


State 73

   17 FunctionCall: Identifier • '(' ')'
   18             | Identifier • '(' ExpressionList ')'
   83 Expression: Identifier •  [POWER, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '[']
  125 Mapping: MAP Identifier • '=' Expression

    '('  shift, and go to state 118
    '='  shift, and go to state 145

    $default  reduce using rule 83 (Expression)


State 74

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  124 Mapping: MAP Expression • ',' Identifier

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    ','        shift, and go to state 146
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142


State 75

  126 VariableBody: Identifier • ':' Identifier
  127             | Identifier • ',' VariableBody

    ','  shift, and go to state 147
    ':'  shift, and go to state 148


State 76

  128 Variable: VAR VariableBody •

    $default  reduce using rule 128 (Variable)


State 77

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error
  115 Instruction: CDASH Identifier • ExpressionNP
  116            | CDASH Identifier • ExpressionNP ',' ExpressionListNP

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 149


State 78

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  117 Instruction: COND '(' • Expression ')' Identifier ExpressionListNP

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 150


State 79

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  136 IfElse: IF '(' • Expression ')' SubStatements
  137       | IF '(' • Expression ')' SubStatements ELSE IfElse
  138       | IF '(' • Expression ')' SubStatements ELSE SubStatements

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 151


State 80

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  133 Assignment: • Expression '=' Expression
  134 OptAssignment: • Assignment
  135              | ε •  [NEWLINE]
  139 ForLoop: FOR '(' • OptAssignment NEWLINE Expression NEWLINE OptAssignment ')' SubStatements

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    NEWLINE  reduce using rule 135 (OptAssignment)

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 152
    Assignment      go to state 153
    OptAssignment   go to state 154


State 81

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  140 ForeachLoop: FOREACH '(' • Expression '=' Expression ELLIPSIS Expression ')' SubStatements

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 155


State 82

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  141 WhileLoop: WHILE '(' • Expression ')' SubStatements

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 156


State 83

    1 Newline: • Newline NEWLINE
    2        | • NEWLINE
    3 OptNewline: • Newline
    4           | ε •  [error, MAP, VAR, CDASH, COND, IF, FOR, FOREACH, WHILE, REPEAT, CONTINUE, BREAK, SET, IDENTIFIER, '.', '{', '}']
  131 SubStatements: '{' • OptNewline StatementList OptNewline '}'
  132              | '{' • OptNewline '}'

    NEWLINE  shift, and go to state 2

    $default  reduce using rule 4 (OptNewline)

    Newline     go to state 3
    OptNewline  go to state 157


State 84

  142 RepeatUntilLoop: REPEAT SubStatements • UNTIL '(' Expression ')'

    UNTIL  shift, and go to state 158


State 85

  103 ExpressionNP: error •

    $default  reduce using rule 103 (ExpressionNP)


State 86

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   53          | '-' • ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 159


State 87

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  102 ExpressionNP: '(' • Expression ')'

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 160


State 88

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   54          | '~' • ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 161


State 89

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   55          | '!' • ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 162


State 90

   91 ExpressionNP: IntegerLiteral •

    $default  reduce using rule 91 (ExpressionNP)


State 91

   92 ExpressionNP: FloatLiteral •

    $default  reduce using rule 92 (ExpressionNP)


State 92

   93 ExpressionNP: MatrixLiteral •

    $default  reduce using rule 93 (ExpressionNP)


State 93

   94 ExpressionNP: StringLiteral •

    $default  reduce using rule 94 (ExpressionNP)


State 94

   95 ExpressionNP: JsonLiteral •

    $default  reduce using rule 95 (ExpressionNP)


State 95

   17 FunctionCall: Identifier • '(' ')'
   18             | Identifier • '(' ExpressionList ')'
   96 ExpressionNP: Identifier •  [$end, NEWLINE, POWER, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '[', '@', '=', '}']

    '('  shift, and go to state 118

    $default  reduce using rule 96 (ExpressionNP)


State 96

   97 ExpressionNP: FunctionCall •

    $default  reduce using rule 97 (ExpressionNP)


State 97

   98 ExpressionNP: IndexNP •

    $default  reduce using rule 98 (ExpressionNP)


State 98

   99 ExpressionNP: UnaryOpNP •

    $default  reduce using rule 99 (ExpressionNP)


State 99

  100 ExpressionNP: BinaryOpNP •

    $default  reduce using rule 100 (ExpressionNP)


State 100

  101 ExpressionNP: TernaryOpNP •

    $default  reduce using rule 101 (ExpressionNP)


State 101

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP
  114 Instruction: SET ExpressionNP • '=' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    LOGIC_OR   shift, and go to state 165
    LOGIC_AND  shift, and go to state 166
    LOGIC_XOR  shift, and go to state 167
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '?'        shift, and go to state 175
    '^'        shift, and go to state 176
    '&'        shift, and go to state 177
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185
    '='        shift, and go to state 186


State 102

  129 Subcircuit: '.' Identifier •  [$end, NEWLINE, '@', '}']
  130           | '.' Identifier • '(' Expression ')'

    '('  shift, and go to state 187

    $default  reduce using rule 129 (Subcircuit)


State 103

   16 Identifier: • IDENTIFIER
  112 Instruction: • Identifier
  113            | • Identifier ExpressionListNP
  114            | • SET ExpressionNP '=' ExpressionNP
  115            | • CDASH Identifier ExpressionNP
  116            | • CDASH Identifier ExpressionNP ',' ExpressionListNP
  117            | • COND '(' Expression ')' Identifier ExpressionListNP
  118 AnnotInstr: • AnnotInstr '@' AnnotationData
  119           | • Instruction
  120 SLParInstrList: • SLParInstrList '|' AnnotInstr
  121               | • AnnotInstr
  122 CBParInstrList: • CBParInstrList Newline SLParInstrList
  123               | • SLParInstrList
  149 Statement: '{' OptNewline • CBParInstrList OptNewline '}'

    CDASH       shift, and go to state 22
    COND        shift, and go to state 23
    SET         shift, and go to state 31
    IDENTIFIER  shift, and go to state 32

    Identifier      go to state 35
    Instruction     go to state 36
    AnnotInstr      go to state 37
    SLParInstrList  go to state 188
    CBParInstrList  go to state 189


State 104

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP
  107 ExpressionListNP: ExpressionNP •  [$end, NEWLINE, ',', '|', '@', '}']

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    LOGIC_OR   shift, and go to state 165
    LOGIC_AND  shift, and go to state 166
    LOGIC_XOR  shift, and go to state 167
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '?'        shift, and go to state 175
    '^'        shift, and go to state 176
    '&'        shift, and go to state 177
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 107 (ExpressionListNP)


State 105

  106 ExpressionListNP: ExpressionListNP • ',' ExpressionNP
  113 Instruction: Identifier ExpressionListNP •  [$end, NEWLINE, '|', '@', '}']

    ','  shift, and go to state 190

    $default  reduce using rule 113 (Instruction)


State 106

   16 Identifier: • IDENTIFIER
  108 AnnotationName: • Identifier '.' Identifier
  109 AnnotationData: • AnnotationName
  110               | • AnnotationName '(' ')'
  111               | • AnnotationName '(' ExpressionList ')'
  118 AnnotInstr: AnnotInstr '@' • AnnotationData

    IDENTIFIER  shift, and go to state 32

    Identifier      go to state 191
    AnnotationName  go to state 192
    AnnotationData  go to state 193


State 107

   16 Identifier: • IDENTIFIER
  112 Instruction: • Identifier
  113            | • Identifier ExpressionListNP
  114            | • SET ExpressionNP '=' ExpressionNP
  115            | • CDASH Identifier ExpressionNP
  116            | • CDASH Identifier ExpressionNP ',' ExpressionListNP
  117            | • COND '(' Expression ')' Identifier ExpressionListNP
  118 AnnotInstr: • AnnotInstr '@' AnnotationData
  119           | • Instruction
  120 SLParInstrList: SLParInstrList '|' • AnnotInstr

    CDASH       shift, and go to state 22
    COND        shift, and go to state 23
    SET         shift, and go to state 31
    IDENTIFIER  shift, and go to state 32

    Identifier   go to state 35
    Instruction  go to state 36
    AnnotInstr   go to state 194


State 108

   16 Identifier: • IDENTIFIER
  108 AnnotationName: • Identifier '.' Identifier
  109 AnnotationData: • AnnotationName
  110               | • AnnotationName '(' ')'
  111               | • AnnotationName '(' ExpressionList ')'
  158 AnnotStatement: AnnotStatement '@' • AnnotationData

    IDENTIFIER  shift, and go to state 32

    Identifier      go to state 191
    AnnotationName  go to state 192
    AnnotationData  go to state 195


State 109

    1 Newline: Newline • NEWLINE
    3 OptNewline: Newline •  [$end, '}']
   16 Identifier: • IDENTIFIER
  112 Instruction: • Identifier
  113            | • Identifier ExpressionListNP
  114            | • SET ExpressionNP '=' ExpressionNP
  115            | • CDASH Identifier ExpressionNP
  116            | • CDASH Identifier ExpressionNP ',' ExpressionListNP
  117            | • COND '(' Expression ')' Identifier ExpressionListNP
  118 AnnotInstr: • AnnotInstr '@' AnnotationData
  119           | • Instruction
  120 SLParInstrList: • SLParInstrList '|' AnnotInstr
  121               | • AnnotInstr
  124 Mapping: • MAP Expression ',' Identifier
  125        | • MAP Identifier '=' Expression
  128 Variable: • VAR VariableBody
  129 Subcircuit: • '.' Identifier
  130           | • '.' Identifier '(' Expression ')'
  136 IfElse: • IF '(' Expression ')' SubStatements
  137       | • IF '(' Expression ')' SubStatements ELSE IfElse
  138       | • IF '(' Expression ')' SubStatements ELSE SubStatements
  139 ForLoop: • FOR '(' OptAssignment NEWLINE Expression NEWLINE OptAssignment ')' SubStatements
  140 ForeachLoop: • FOREACH '(' Expression '=' Expression ELLIPSIS Expression ')' SubStatements
  141 WhileLoop: • WHILE '(' Expression ')' SubStatements
  142 RepeatUntilLoop: • REPEAT SubStatements UNTIL '(' Expression ')'
  143 Continue: • CONTINUE
  144 Break: • BREAK
  145 Statement: • Mapping
  146          | • Variable
  147          | • Subcircuit
  148          | • SLParInstrList
  149          | • '{' OptNewline CBParInstrList OptNewline '}'
  150          | • IfElse
  151          | • ForLoop
  152          | • ForeachLoop
  153          | • WhileLoop
  154          | • RepeatUntilLoop
  155          | • Continue
  156          | • Break
  157          | • error
  158 AnnotStatement: • AnnotStatement '@' AnnotationData
  159               | • Statement
  160 StatementList: StatementList Newline • AnnotStatement

    error       shift, and go to state 18
    NEWLINE     shift, and go to state 7
    MAP         shift, and go to state 20
    VAR         shift, and go to state 21
    CDASH       shift, and go to state 22
    COND        shift, and go to state 23
    IF          shift, and go to state 24
    FOR         shift, and go to state 25
    FOREACH     shift, and go to state 26
    WHILE       shift, and go to state 27
    REPEAT      shift, and go to state 28
    CONTINUE    shift, and go to state 29
    BREAK       shift, and go to state 30
    SET         shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    '.'         shift, and go to state 33
    '{'         shift, and go to state 34

    $end  reduce using rule 3 (OptNewline)
    '}'   reduce using rule 3 (OptNewline)

    Identifier       go to state 35
    Instruction      go to state 36
    AnnotInstr       go to state 37
    SLParInstrList   go to state 38
    Mapping          go to state 39
    Variable         go to state 40
    Subcircuit       go to state 41
    IfElse           go to state 42
    ForLoop          go to state 43
    ForeachLoop      go to state 44
    WhileLoop        go to state 45
    RepeatUntilLoop  go to state 46
    Continue         go to state 47
    Break            go to state 48
    Statement        go to state 49
    AnnotStatement   go to state 196


State 110

  162 Statements: Newline StatementList OptNewline •

    $default  reduce using rule 162 (Statements)


State 111

   11 StringBuilder: StringBuilder • STRBUILD_APPEND
   12              | StringBuilder • STRBUILD_ESCAPE
   14 StringLiteral: STRING_OPEN StringBuilder • STRING_CLOSE

    STRING_CLOSE     shift, and go to state 197
    STRBUILD_APPEND  shift, and go to state 198
    STRBUILD_ESCAPE  shift, and go to state 199


State 112

   11 StringBuilder: StringBuilder • STRBUILD_APPEND
   12              | StringBuilder • STRBUILD_ESCAPE
   15 JsonLiteral: JSON_OPEN StringBuilder • JSON_CLOSE

    JSON_CLOSE       shift, and go to state 200
    STRBUILD_APPEND  shift, and go to state 198
    STRBUILD_ESCAPE  shift, and go to state 199


State 113

   25 Index: Expression • '[' IndexList ']'
   27 UnaryOp: '-' Expression •  [$end, NEWLINE, POWER, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', ']', ')', '=', '}']
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    '['  shift, and go to state 142

    $default  reduce using rule 27 (UnaryOp)

    Conflict between rule 27 and token POWER resolved as reduce (POWER < UMINUS).
    Conflict between rule 27 and token INT_DIV resolved as reduce (INT_DIV < UMINUS).
    Conflict between rule 27 and token LOGIC_OR resolved as reduce (LOGIC_OR < UMINUS).
    Conflict between rule 27 and token LOGIC_AND resolved as reduce (LOGIC_AND < UMINUS).
    Conflict between rule 27 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < UMINUS).
    Conflict between rule 27 and token CMP_GE resolved as reduce (CMP_GE < UMINUS).
    Conflict between rule 27 and token CMP_LE resolved as reduce (CMP_LE < UMINUS).
    Conflict between rule 27 and token CMP_EQ resolved as reduce (CMP_EQ < UMINUS).
    Conflict between rule 27 and token CMP_NE resolved as reduce (CMP_NE < UMINUS).
    Conflict between rule 27 and token SHL resolved as reduce (SHL < UMINUS).
    Conflict between rule 27 and token ARITH_SHR resolved as reduce (ARITH_SHR < UMINUS).
    Conflict between rule 27 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < UMINUS).
    Conflict between rule 27 and token '?' resolved as reduce ('?' < UMINUS).
    Conflict between rule 27 and token '|' resolved as reduce ('|' < UMINUS).
    Conflict between rule 27 and token '^' resolved as reduce ('^' < UMINUS).
    Conflict between rule 27 and token '&' resolved as reduce ('&' < UMINUS).
    Conflict between rule 27 and token '>' resolved as reduce ('>' < UMINUS).
    Conflict between rule 27 and token '<' resolved as reduce ('<' < UMINUS).
    Conflict between rule 27 and token '+' resolved as reduce ('+' < UMINUS).
    Conflict between rule 27 and token '-' resolved as reduce ('-' < UMINUS).
    Conflict between rule 27 and token '*' resolved as reduce ('*' < UMINUS).
    Conflict between rule 27 and token '/' resolved as reduce ('/' < UMINUS).
    Conflict between rule 27 and token '%' resolved as reduce ('%' < UMINUS).
    Conflict between rule 27 and token '[' resolved as shift (UMINUS < '[').


State 114

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
   89 Expression: '(' Expression • ')'

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142
    ')'        shift, and go to state 201


State 115

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    7 MatrixRows: • MatrixRows Newline ExpressionList
    8           | • ExpressionList
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
    9              | '[' OptNewline • MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   10              | '[' OptNewline • ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  104 ExpressionList: • ExpressionList ',' Expression
  105               | • Expression

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    ']'            shift, and go to state 202
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixRows      go to state 203
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 204
    ExpressionList  go to state 205


State 116

   25 Index: Expression • '[' IndexList ']'
   28 UnaryOp: '~' Expression •  [$end, NEWLINE, POWER, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', ']', ')', '=', '}']
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    '['  shift, and go to state 142

    $default  reduce using rule 28 (UnaryOp)

    Conflict between rule 28 and token POWER resolved as reduce (POWER < UCOMP).
    Conflict between rule 28 and token INT_DIV resolved as reduce (INT_DIV < UCOMP).
    Conflict between rule 28 and token LOGIC_OR resolved as reduce (LOGIC_OR < UCOMP).
    Conflict between rule 28 and token LOGIC_AND resolved as reduce (LOGIC_AND < UCOMP).
    Conflict between rule 28 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < UCOMP).
    Conflict between rule 28 and token CMP_GE resolved as reduce (CMP_GE < UCOMP).
    Conflict between rule 28 and token CMP_LE resolved as reduce (CMP_LE < UCOMP).
    Conflict between rule 28 and token CMP_EQ resolved as reduce (CMP_EQ < UCOMP).
    Conflict between rule 28 and token CMP_NE resolved as reduce (CMP_NE < UCOMP).
    Conflict between rule 28 and token SHL resolved as reduce (SHL < UCOMP).
    Conflict between rule 28 and token ARITH_SHR resolved as reduce (ARITH_SHR < UCOMP).
    Conflict between rule 28 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < UCOMP).
    Conflict between rule 28 and token '?' resolved as reduce ('?' < UCOMP).
    Conflict between rule 28 and token '|' resolved as reduce ('|' < UCOMP).
    Conflict between rule 28 and token '^' resolved as reduce ('^' < UCOMP).
    Conflict between rule 28 and token '&' resolved as reduce ('&' < UCOMP).
    Conflict between rule 28 and token '>' resolved as reduce ('>' < UCOMP).
    Conflict between rule 28 and token '<' resolved as reduce ('<' < UCOMP).
    Conflict between rule 28 and token '+' resolved as reduce ('+' < UCOMP).
    Conflict between rule 28 and token '-' resolved as reduce ('-' < UCOMP).
    Conflict between rule 28 and token '*' resolved as reduce ('*' < UCOMP).
    Conflict between rule 28 and token '/' resolved as reduce ('/' < UCOMP).
    Conflict between rule 28 and token '%' resolved as reduce ('%' < UCOMP).
    Conflict between rule 28 and token '[' resolved as shift (UCOMP < '[').


State 117

   25 Index: Expression • '[' IndexList ']'
   29 UnaryOp: '!' Expression •  [$end, NEWLINE, POWER, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', ']', ')', '=', '}']
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    '['  shift, and go to state 142

    $default  reduce using rule 29 (UnaryOp)

    Conflict between rule 29 and token POWER resolved as reduce (POWER < UNOT).
    Conflict between rule 29 and token INT_DIV resolved as reduce (INT_DIV < UNOT).
    Conflict between rule 29 and token LOGIC_OR resolved as reduce (LOGIC_OR < UNOT).
    Conflict between rule 29 and token LOGIC_AND resolved as reduce (LOGIC_AND < UNOT).
    Conflict between rule 29 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < UNOT).
    Conflict between rule 29 and token CMP_GE resolved as reduce (CMP_GE < UNOT).
    Conflict between rule 29 and token CMP_LE resolved as reduce (CMP_LE < UNOT).
    Conflict between rule 29 and token CMP_EQ resolved as reduce (CMP_EQ < UNOT).
    Conflict between rule 29 and token CMP_NE resolved as reduce (CMP_NE < UNOT).
    Conflict between rule 29 and token SHL resolved as reduce (SHL < UNOT).
    Conflict between rule 29 and token ARITH_SHR resolved as reduce (ARITH_SHR < UNOT).
    Conflict between rule 29 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < UNOT).
    Conflict between rule 29 and token '?' resolved as reduce ('?' < UNOT).
    Conflict between rule 29 and token '|' resolved as reduce ('|' < UNOT).
    Conflict between rule 29 and token '^' resolved as reduce ('^' < UNOT).
    Conflict between rule 29 and token '&' resolved as reduce ('&' < UNOT).
    Conflict between rule 29 and token '>' resolved as reduce ('>' < UNOT).
    Conflict between rule 29 and token '<' resolved as reduce ('<' < UNOT).
    Conflict between rule 29 and token '+' resolved as reduce ('+' < UNOT).
    Conflict between rule 29 and token '-' resolved as reduce ('-' < UNOT).
    Conflict between rule 29 and token '*' resolved as reduce ('*' < UNOT).
    Conflict between rule 29 and token '/' resolved as reduce ('/' < UNOT).
    Conflict between rule 29 and token '%' resolved as reduce ('%' < UNOT).
    Conflict between rule 29 and token '[' resolved as shift (UNOT < '[').


State 118

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   17             | Identifier '(' • ')'
   18             | • Identifier '(' ExpressionList ')'
   18             | Identifier '(' • ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  104 ExpressionList: • ExpressionList ',' Expression
  105               | • Expression

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    ')'            shift, and go to state 206
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 204
    ExpressionList  go to state 207


State 119

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   30         | Expression POWER • Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 208


State 120

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   33         | Expression INT_DIV • Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 209


State 121

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   51         | Expression LOGIC_OR • Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 210


State 122

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   49         | Expression LOGIC_AND • Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 211


State 123

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   50         | Expression LOGIC_XOR • Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 212


State 124

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   43         | Expression CMP_GE • Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 213


State 125

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   45         | Expression CMP_LE • Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 214


State 126

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   40         | Expression CMP_EQ • Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 215


State 127

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   41         | Expression CMP_NE • Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 216


State 128

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   37         | Expression SHL • Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 217


State 129

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   38         | Expression ARITH_SHR • Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 218


State 130

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   39         | Expression LOGIC_SHR • Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 219


State 131

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   52          | Expression '?' • Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 220


State 132

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   48         | Expression '|' • Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 221


State 133

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   47         | Expression '^' • Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 222


State 134

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   46         | Expression '&' • Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 223


State 135

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   42         | Expression '>' • Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 224


State 136

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   44         | Expression '<' • Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 225


State 137

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   35         | Expression '+' • Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 226


State 138

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   36         | Expression '-' • Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 227


State 139

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   31         | Expression '*' • Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 228


State 140

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   32         | Expression '/' • Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 229


State 141

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   34         | Expression '%' • Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 230


State 142

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   19 IndexItem: • Expression
   20 IndexRange: • Expression ':' Expression
   21 IndexEntry: • IndexItem
   22           | • IndexRange
   23 IndexList: • IndexList ',' IndexEntry
   24          | • IndexEntry
   25 Index: • Expression '[' IndexList ']'
   25      | Expression '[' • IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    IndexItem       go to state 231
    IndexRange      go to state 232
    IndexEntry      go to state 233
    IndexList       go to state 234
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 235


State 143

    1 Newline: Newline • NEWLINE
    3 OptNewline: Newline •  [$end]
   16 Identifier: • IDENTIFIER
  112 Instruction: • Identifier
  113            | • Identifier ExpressionListNP
  114            | • SET ExpressionNP '=' ExpressionNP
  115            | • CDASH Identifier ExpressionNP
  116            | • CDASH Identifier ExpressionNP ',' ExpressionListNP
  117            | • COND '(' Expression ')' Identifier ExpressionListNP
  118 AnnotInstr: • AnnotInstr '@' AnnotationData
  119           | • Instruction
  120 SLParInstrList: • SLParInstrList '|' AnnotInstr
  121               | • AnnotInstr
  124 Mapping: • MAP Expression ',' Identifier
  125        | • MAP Identifier '=' Expression
  128 Variable: • VAR VariableBody
  129 Subcircuit: • '.' Identifier
  130           | • '.' Identifier '(' Expression ')'
  136 IfElse: • IF '(' Expression ')' SubStatements
  137       | • IF '(' Expression ')' SubStatements ELSE IfElse
  138       | • IF '(' Expression ')' SubStatements ELSE SubStatements
  139 ForLoop: • FOR '(' OptAssignment NEWLINE Expression NEWLINE OptAssignment ')' SubStatements
  140 ForeachLoop: • FOREACH '(' Expression '=' Expression ELLIPSIS Expression ')' SubStatements
  141 WhileLoop: • WHILE '(' Expression ')' SubStatements
  142 RepeatUntilLoop: • REPEAT SubStatements UNTIL '(' Expression ')'
  143 Continue: • CONTINUE
  144 Break: • BREAK
  145 Statement: • Mapping
  146          | • Variable
  147          | • Subcircuit
  148          | • SLParInstrList
  149          | • '{' OptNewline CBParInstrList OptNewline '}'
  150          | • IfElse
  151          | • ForLoop
  152          | • ForeachLoop
  153          | • WhileLoop
  154          | • RepeatUntilLoop
  155          | • Continue
  156          | • Break
  157          | • error
  158 AnnotStatement: • AnnotStatement '@' AnnotationData
  159               | • Statement
  160 StatementList: • StatementList Newline AnnotStatement
  161              | • AnnotStatement
  162 Statements: Newline • StatementList OptNewline

    error       shift, and go to state 18
    NEWLINE     shift, and go to state 7
    MAP         shift, and go to state 20
    VAR         shift, and go to state 21
    CDASH       shift, and go to state 22
    COND        shift, and go to state 23
    IF          shift, and go to state 24
    FOR         shift, and go to state 25
    FOREACH     shift, and go to state 26
    WHILE       shift, and go to state 27
    REPEAT      shift, and go to state 28
    CONTINUE    shift, and go to state 29
    BREAK       shift, and go to state 30
    SET         shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    '.'         shift, and go to state 33
    '{'         shift, and go to state 34

    $end  reduce using rule 3 (OptNewline)

    Identifier       go to state 35
    Instruction      go to state 36
    AnnotInstr       go to state 37
    SLParInstrList   go to state 38
    Mapping          go to state 39
    Variable         go to state 40
    Subcircuit       go to state 41
    IfElse           go to state 42
    ForLoop          go to state 43
    ForeachLoop      go to state 44
    WhileLoop        go to state 45
    RepeatUntilLoop  go to state 46
    Continue         go to state 47
    Break            go to state 48
    Statement        go to state 49
    AnnotStatement   go to state 50
    StatementList    go to state 51


State 144

  166 Program: OptNewline VERSION Version Newline QUBITS Expression Statements •

    $default  reduce using rule 166 (Program)


State 145

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  125 Mapping: MAP Identifier '=' • Expression

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 236


State 146

   16 Identifier: • IDENTIFIER
  124 Mapping: MAP Expression ',' • Identifier

    IDENTIFIER  shift, and go to state 32

    Identifier  go to state 237


State 147

   16 Identifier: • IDENTIFIER
  126 VariableBody: • Identifier ':' Identifier
  127             | • Identifier ',' VariableBody
  127             | Identifier ',' • VariableBody

    IDENTIFIER  shift, and go to state 32

    Identifier    go to state 75
    VariableBody  go to state 238


State 148

   16 Identifier: • IDENTIFIER
  126 VariableBody: Identifier ':' • Identifier

    IDENTIFIER  shift, and go to state 32

    Identifier  go to state 239


State 149

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP
  115 Instruction: CDASH Identifier ExpressionNP •  [$end, NEWLINE, '|', '@', '}']
  116            | CDASH Identifier ExpressionNP • ',' ExpressionListNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    LOGIC_OR   shift, and go to state 165
    LOGIC_AND  shift, and go to state 166
    LOGIC_XOR  shift, and go to state 167
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    ','        shift, and go to state 240
    '?'        shift, and go to state 175
    '^'        shift, and go to state 176
    '&'        shift, and go to state 177
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 115 (Instruction)


State 150

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  117 Instruction: COND '(' Expression • ')' Identifier ExpressionListNP

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142
    ')'        shift, and go to state 241


State 151

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  136 IfElse: IF '(' Expression • ')' SubStatements
  137       | IF '(' Expression • ')' SubStatements ELSE IfElse
  138       | IF '(' Expression • ')' SubStatements ELSE SubStatements

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142
    ')'        shift, and go to state 242


State 152

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  133 Assignment: Expression • '=' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142
    '='        shift, and go to state 243


State 153

  134 OptAssignment: Assignment •

    $default  reduce using rule 134 (OptAssignment)


State 154

  139 ForLoop: FOR '(' OptAssignment • NEWLINE Expression NEWLINE OptAssignment ')' SubStatements

    NEWLINE  shift, and go to state 244


State 155

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  140 ForeachLoop: FOREACH '(' Expression • '=' Expression ELLIPSIS Expression ')' SubStatements

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142
    '='        shift, and go to state 245


State 156

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  141 WhileLoop: WHILE '(' Expression • ')' SubStatements

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142
    ')'        shift, and go to state 246


State 157

   16 Identifier: • IDENTIFIER
  112 Instruction: • Identifier
  113            | • Identifier ExpressionListNP
  114            | • SET ExpressionNP '=' ExpressionNP
  115            | • CDASH Identifier ExpressionNP
  116            | • CDASH Identifier ExpressionNP ',' ExpressionListNP
  117            | • COND '(' Expression ')' Identifier ExpressionListNP
  118 AnnotInstr: • AnnotInstr '@' AnnotationData
  119           | • Instruction
  120 SLParInstrList: • SLParInstrList '|' AnnotInstr
  121               | • AnnotInstr
  124 Mapping: • MAP Expression ',' Identifier
  125        | • MAP Identifier '=' Expression
  128 Variable: • VAR VariableBody
  129 Subcircuit: • '.' Identifier
  130           | • '.' Identifier '(' Expression ')'
  131 SubStatements: '{' OptNewline • StatementList OptNewline '}'
  132              | '{' OptNewline • '}'
  136 IfElse: • IF '(' Expression ')' SubStatements
  137       | • IF '(' Expression ')' SubStatements ELSE IfElse
  138       | • IF '(' Expression ')' SubStatements ELSE SubStatements
  139 ForLoop: • FOR '(' OptAssignment NEWLINE Expression NEWLINE OptAssignment ')' SubStatements
  140 ForeachLoop: • FOREACH '(' Expression '=' Expression ELLIPSIS Expression ')' SubStatements
  141 WhileLoop: • WHILE '(' Expression ')' SubStatements
  142 RepeatUntilLoop: • REPEAT SubStatements UNTIL '(' Expression ')'
  143 Continue: • CONTINUE
  144 Break: • BREAK
  145 Statement: • Mapping
  146          | • Variable
  147          | • Subcircuit
  148          | • SLParInstrList
  149          | • '{' OptNewline CBParInstrList OptNewline '}'
  150          | • IfElse
  151          | • ForLoop
  152          | • ForeachLoop
  153          | • WhileLoop
  154          | • RepeatUntilLoop
  155          | • Continue
  156          | • Break
  157          | • error
  158 AnnotStatement: • AnnotStatement '@' AnnotationData
  159               | • Statement
  160 StatementList: • StatementList Newline AnnotStatement
  161              | • AnnotStatement

    error       shift, and go to state 18
    MAP         shift, and go to state 20
    VAR         shift, and go to state 21
    CDASH       shift, and go to state 22
    COND        shift, and go to state 23
    IF          shift, and go to state 24
    FOR         shift, and go to state 25
    FOREACH     shift, and go to state 26
    WHILE       shift, and go to state 27
    REPEAT      shift, and go to state 28
    CONTINUE    shift, and go to state 29
    BREAK       shift, and go to state 30
    SET         shift, and go to state 31
    IDENTIFIER  shift, and go to state 32
    '.'         shift, and go to state 33
    '{'         shift, and go to state 34
    '}'         shift, and go to state 247

    Identifier       go to state 35
    Instruction      go to state 36
    AnnotInstr       go to state 37
    SLParInstrList   go to state 38
    Mapping          go to state 39
    Variable         go to state 40
    Subcircuit       go to state 41
    IfElse           go to state 42
    ForLoop          go to state 43
    ForeachLoop      go to state 44
    WhileLoop        go to state 45
    RepeatUntilLoop  go to state 46
    Continue         go to state 47
    Break            go to state 48
    Statement        go to state 49
    AnnotStatement   go to state 50
    StatementList    go to state 248


State 158

  142 RepeatUntilLoop: REPEAT SubStatements UNTIL • '(' Expression ')'

    '('  shift, and go to state 249


State 159

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   53 UnaryOpNP: '-' ExpressionNP •  [$end, NEWLINE, POWER, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', '=', '}']
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    '['  shift, and go to state 185

    $default  reduce using rule 53 (UnaryOpNP)

    Conflict between rule 53 and token POWER resolved as reduce (POWER < UMINUS).
    Conflict between rule 53 and token INT_DIV resolved as reduce (INT_DIV < UMINUS).
    Conflict between rule 53 and token LOGIC_OR resolved as reduce (LOGIC_OR < UMINUS).
    Conflict between rule 53 and token LOGIC_AND resolved as reduce (LOGIC_AND < UMINUS).
    Conflict between rule 53 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < UMINUS).
    Conflict between rule 53 and token CMP_GE resolved as reduce (CMP_GE < UMINUS).
    Conflict between rule 53 and token CMP_LE resolved as reduce (CMP_LE < UMINUS).
    Conflict between rule 53 and token CMP_EQ resolved as reduce (CMP_EQ < UMINUS).
    Conflict between rule 53 and token CMP_NE resolved as reduce (CMP_NE < UMINUS).
    Conflict between rule 53 and token SHL resolved as reduce (SHL < UMINUS).
    Conflict between rule 53 and token ARITH_SHR resolved as reduce (ARITH_SHR < UMINUS).
    Conflict between rule 53 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < UMINUS).
    Conflict between rule 53 and token '?' resolved as reduce ('?' < UMINUS).
    Conflict between rule 53 and token '^' resolved as reduce ('^' < UMINUS).
    Conflict between rule 53 and token '&' resolved as reduce ('&' < UMINUS).
    Conflict between rule 53 and token '>' resolved as reduce ('>' < UMINUS).
    Conflict between rule 53 and token '<' resolved as reduce ('<' < UMINUS).
    Conflict between rule 53 and token '+' resolved as reduce ('+' < UMINUS).
    Conflict between rule 53 and token '-' resolved as reduce ('-' < UMINUS).
    Conflict between rule 53 and token '*' resolved as reduce ('*' < UMINUS).
    Conflict between rule 53 and token '/' resolved as reduce ('/' < UMINUS).
    Conflict between rule 53 and token '%' resolved as reduce ('%' < UMINUS).
    Conflict between rule 53 and token '[' resolved as shift (UMINUS < '[').


State 160

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  102 ExpressionNP: '(' Expression • ')'

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142
    ')'        shift, and go to state 250


State 161

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   54 UnaryOpNP: '~' ExpressionNP •  [$end, NEWLINE, POWER, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', '=', '}']
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    '['  shift, and go to state 185

    $default  reduce using rule 54 (UnaryOpNP)

    Conflict between rule 54 and token POWER resolved as reduce (POWER < UCOMP).
    Conflict between rule 54 and token INT_DIV resolved as reduce (INT_DIV < UCOMP).
    Conflict between rule 54 and token LOGIC_OR resolved as reduce (LOGIC_OR < UCOMP).
    Conflict between rule 54 and token LOGIC_AND resolved as reduce (LOGIC_AND < UCOMP).
    Conflict between rule 54 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < UCOMP).
    Conflict between rule 54 and token CMP_GE resolved as reduce (CMP_GE < UCOMP).
    Conflict between rule 54 and token CMP_LE resolved as reduce (CMP_LE < UCOMP).
    Conflict between rule 54 and token CMP_EQ resolved as reduce (CMP_EQ < UCOMP).
    Conflict between rule 54 and token CMP_NE resolved as reduce (CMP_NE < UCOMP).
    Conflict between rule 54 and token SHL resolved as reduce (SHL < UCOMP).
    Conflict between rule 54 and token ARITH_SHR resolved as reduce (ARITH_SHR < UCOMP).
    Conflict between rule 54 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < UCOMP).
    Conflict between rule 54 and token '?' resolved as reduce ('?' < UCOMP).
    Conflict between rule 54 and token '^' resolved as reduce ('^' < UCOMP).
    Conflict between rule 54 and token '&' resolved as reduce ('&' < UCOMP).
    Conflict between rule 54 and token '>' resolved as reduce ('>' < UCOMP).
    Conflict between rule 54 and token '<' resolved as reduce ('<' < UCOMP).
    Conflict between rule 54 and token '+' resolved as reduce ('+' < UCOMP).
    Conflict between rule 54 and token '-' resolved as reduce ('-' < UCOMP).
    Conflict between rule 54 and token '*' resolved as reduce ('*' < UCOMP).
    Conflict between rule 54 and token '/' resolved as reduce ('/' < UCOMP).
    Conflict between rule 54 and token '%' resolved as reduce ('%' < UCOMP).
    Conflict between rule 54 and token '[' resolved as shift (UCOMP < '[').


State 162

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   55 UnaryOpNP: '!' ExpressionNP •  [$end, NEWLINE, POWER, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', '=', '}']
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    '['  shift, and go to state 185

    $default  reduce using rule 55 (UnaryOpNP)

    Conflict between rule 55 and token POWER resolved as reduce (POWER < UNOT).
    Conflict between rule 55 and token INT_DIV resolved as reduce (INT_DIV < UNOT).
    Conflict between rule 55 and token LOGIC_OR resolved as reduce (LOGIC_OR < UNOT).
    Conflict between rule 55 and token LOGIC_AND resolved as reduce (LOGIC_AND < UNOT).
    Conflict between rule 55 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < UNOT).
    Conflict between rule 55 and token CMP_GE resolved as reduce (CMP_GE < UNOT).
    Conflict between rule 55 and token CMP_LE resolved as reduce (CMP_LE < UNOT).
    Conflict between rule 55 and token CMP_EQ resolved as reduce (CMP_EQ < UNOT).
    Conflict between rule 55 and token CMP_NE resolved as reduce (CMP_NE < UNOT).
    Conflict between rule 55 and token SHL resolved as reduce (SHL < UNOT).
    Conflict between rule 55 and token ARITH_SHR resolved as reduce (ARITH_SHR < UNOT).
    Conflict between rule 55 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < UNOT).
    Conflict between rule 55 and token '?' resolved as reduce ('?' < UNOT).
    Conflict between rule 55 and token '^' resolved as reduce ('^' < UNOT).
    Conflict between rule 55 and token '&' resolved as reduce ('&' < UNOT).
    Conflict between rule 55 and token '>' resolved as reduce ('>' < UNOT).
    Conflict between rule 55 and token '<' resolved as reduce ('<' < UNOT).
    Conflict between rule 55 and token '+' resolved as reduce ('+' < UNOT).
    Conflict between rule 55 and token '-' resolved as reduce ('-' < UNOT).
    Conflict between rule 55 and token '*' resolved as reduce ('*' < UNOT).
    Conflict between rule 55 and token '/' resolved as reduce ('/' < UNOT).
    Conflict between rule 55 and token '%' resolved as reduce ('%' < UNOT).
    Conflict between rule 55 and token '[' resolved as shift (UNOT < '[').


State 163

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   56           | ExpressionNP POWER • ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 251


State 164

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   59           | ExpressionNP INT_DIV • ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 252


State 165

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   76           | ExpressionNP LOGIC_OR • ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 253


State 166

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   74           | ExpressionNP LOGIC_AND • ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 254


State 167

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   75           | ExpressionNP LOGIC_XOR • ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 255


State 168

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   69           | ExpressionNP CMP_GE • ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 256


State 169

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   71           | ExpressionNP CMP_LE • ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 257


State 170

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   66           | ExpressionNP CMP_EQ • ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 258


State 171

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   67           | ExpressionNP CMP_NE • ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 259


State 172

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   63           | ExpressionNP SHL • ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 260


State 173

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   64           | ExpressionNP ARITH_SHR • ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 261


State 174

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   65           | ExpressionNP LOGIC_SHR • ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 262


State 175

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   77            | ExpressionNP '?' • ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 263


State 176

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   73           | ExpressionNP '^' • ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 264


State 177

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   72           | ExpressionNP '&' • ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 265


State 178

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   68           | ExpressionNP '>' • ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 266


State 179

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   70           | ExpressionNP '<' • ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 267


State 180

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   61           | ExpressionNP '+' • ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 268


State 181

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   62           | ExpressionNP '-' • ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 269


State 182

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   57           | ExpressionNP '*' • ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 270


State 183

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   58           | ExpressionNP '/' • ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 271


State 184

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   60           | ExpressionNP '%' • ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 272


State 185

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   19 IndexItem: • Expression
   20 IndexRange: • Expression ':' Expression
   21 IndexEntry: • IndexItem
   22           | • IndexRange
   23 IndexList: • IndexList ',' IndexEntry
   24          | • IndexEntry
   25 Index: • Expression '[' IndexList ']'
   26 IndexNP: ExpressionNP '[' • IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    IndexItem       go to state 231
    IndexRange      go to state 232
    IndexEntry      go to state 233
    IndexList       go to state 273
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 235


State 186

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error
  114 Instruction: SET ExpressionNP '=' • ExpressionNP

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 274


State 187

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  130 Subcircuit: '.' Identifier '(' • Expression ')'

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 275


State 188

  120 SLParInstrList: SLParInstrList • '|' AnnotInstr
  123 CBParInstrList: SLParInstrList •  [NEWLINE, '}']

    '|'  shift, and go to state 107

    $default  reduce using rule 123 (CBParInstrList)


State 189

    1 Newline: • Newline NEWLINE
    2        | • NEWLINE
    3 OptNewline: • Newline
    4           | ε •  ['}']
  122 CBParInstrList: CBParInstrList • Newline SLParInstrList
  149 Statement: '{' OptNewline CBParInstrList • OptNewline '}'

    NEWLINE  shift, and go to state 2

    $default  reduce using rule 4 (OptNewline)

    Newline     go to state 276
    OptNewline  go to state 277


State 190

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error
  106 ExpressionListNP: ExpressionListNP ',' • ExpressionNP

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 278


State 191

  108 AnnotationName: Identifier • '.' Identifier

    '.'  shift, and go to state 279


State 192

  109 AnnotationData: AnnotationName •  [$end, NEWLINE, '|', '@', '}']
  110               | AnnotationName • '(' ')'
  111               | AnnotationName • '(' ExpressionList ')'

    '('  shift, and go to state 280

    $default  reduce using rule 109 (AnnotationData)


State 193

  118 AnnotInstr: AnnotInstr '@' AnnotationData •

    $default  reduce using rule 118 (AnnotInstr)


State 194

  118 AnnotInstr: AnnotInstr • '@' AnnotationData
  120 SLParInstrList: SLParInstrList '|' AnnotInstr •  [$end, NEWLINE, '|', '}']

    '@'  shift, and go to state 106

    $default  reduce using rule 120 (SLParInstrList)

    Conflict between rule 120 and token '@' resolved as shift ('|' < '@').


State 195

  158 AnnotStatement: AnnotStatement '@' AnnotationData •

    $default  reduce using rule 158 (AnnotStatement)


State 196

  158 AnnotStatement: AnnotStatement • '@' AnnotationData
  160 StatementList: StatementList Newline AnnotStatement •  [$end, NEWLINE, '}']

    '@'  shift, and go to state 108

    $default  reduce using rule 160 (StatementList)


State 197

   14 StringLiteral: STRING_OPEN StringBuilder STRING_CLOSE •

    $default  reduce using rule 14 (StringLiteral)


State 198

   11 StringBuilder: StringBuilder STRBUILD_APPEND •

    $default  reduce using rule 11 (StringBuilder)


State 199

   12 StringBuilder: StringBuilder STRBUILD_ESCAPE •

    $default  reduce using rule 12 (StringBuilder)


State 200

   15 JsonLiteral: JSON_OPEN StringBuilder JSON_CLOSE •

    $default  reduce using rule 15 (JsonLiteral)


State 201

   89 Expression: '(' Expression ')' •

    $default  reduce using rule 89 (Expression)


State 202

   10 MatrixLiteral: '[' OptNewline ']' •

    $default  reduce using rule 10 (MatrixLiteral)


State 203

    1 Newline: • Newline NEWLINE
    2        | • NEWLINE
    3 OptNewline: • Newline
    4           | ε •  [']']
    7 MatrixRows: MatrixRows • Newline ExpressionList
    9 MatrixLiteral: '[' OptNewline MatrixRows • OptNewline ']'

    NEWLINE  shift, and go to state 2

    $default  reduce using rule 4 (OptNewline)

    Newline     go to state 281
    OptNewline  go to state 282


State 204

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  105 ExpressionList: Expression •  [NEWLINE, ',', ']', ')']

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 105 (ExpressionList)


State 205

    8 MatrixRows: ExpressionList •  [NEWLINE, ']']
  104 ExpressionList: ExpressionList • ',' Expression

    ','  shift, and go to state 283

    $default  reduce using rule 8 (MatrixRows)


State 206

   17 FunctionCall: Identifier '(' ')' •

    $default  reduce using rule 17 (FunctionCall)


State 207

   18 FunctionCall: Identifier '(' ExpressionList • ')'
  104 ExpressionList: ExpressionList • ',' Expression

    ','  shift, and go to state 283
    ')'  shift, and go to state 284


State 208

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   30         | Expression POWER Expression •  [$end, NEWLINE, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', ']', ')', '=', '}']
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER  shift, and go to state 119
    '['    shift, and go to state 142

    $default  reduce using rule 30 (BinaryOp)

    Conflict between rule 30 and token POWER resolved as shift (%right POWER).
    Conflict between rule 30 and token INT_DIV resolved as reduce (INT_DIV < POWER).
    Conflict between rule 30 and token LOGIC_OR resolved as reduce (LOGIC_OR < POWER).
    Conflict between rule 30 and token LOGIC_AND resolved as reduce (LOGIC_AND < POWER).
    Conflict between rule 30 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < POWER).
    Conflict between rule 30 and token CMP_GE resolved as reduce (CMP_GE < POWER).
    Conflict between rule 30 and token CMP_LE resolved as reduce (CMP_LE < POWER).
    Conflict between rule 30 and token CMP_EQ resolved as reduce (CMP_EQ < POWER).
    Conflict between rule 30 and token CMP_NE resolved as reduce (CMP_NE < POWER).
    Conflict between rule 30 and token SHL resolved as reduce (SHL < POWER).
    Conflict between rule 30 and token ARITH_SHR resolved as reduce (ARITH_SHR < POWER).
    Conflict between rule 30 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < POWER).
    Conflict between rule 30 and token '?' resolved as reduce ('?' < POWER).
    Conflict between rule 30 and token '|' resolved as reduce ('|' < POWER).
    Conflict between rule 30 and token '^' resolved as reduce ('^' < POWER).
    Conflict between rule 30 and token '&' resolved as reduce ('&' < POWER).
    Conflict between rule 30 and token '>' resolved as reduce ('>' < POWER).
    Conflict between rule 30 and token '<' resolved as reduce ('<' < POWER).
    Conflict between rule 30 and token '+' resolved as reduce ('+' < POWER).
    Conflict between rule 30 and token '-' resolved as reduce ('-' < POWER).
    Conflict between rule 30 and token '*' resolved as reduce ('*' < POWER).
    Conflict between rule 30 and token '/' resolved as reduce ('/' < POWER).
    Conflict between rule 30 and token '%' resolved as reduce ('%' < POWER).
    Conflict between rule 30 and token '[' resolved as shift (POWER < '[').


State 209

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   33         | Expression INT_DIV Expression •  [$end, NEWLINE, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', ']', ')', '=', '}']
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER  shift, and go to state 119
    '['    shift, and go to state 142

    $default  reduce using rule 33 (BinaryOp)

    Conflict between rule 33 and token POWER resolved as shift (INT_DIV < POWER).
    Conflict between rule 33 and token INT_DIV resolved as reduce (%left INT_DIV).
    Conflict between rule 33 and token LOGIC_OR resolved as reduce (LOGIC_OR < INT_DIV).
    Conflict between rule 33 and token LOGIC_AND resolved as reduce (LOGIC_AND < INT_DIV).
    Conflict between rule 33 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < INT_DIV).
    Conflict between rule 33 and token CMP_GE resolved as reduce (CMP_GE < INT_DIV).
    Conflict between rule 33 and token CMP_LE resolved as reduce (CMP_LE < INT_DIV).
    Conflict between rule 33 and token CMP_EQ resolved as reduce (CMP_EQ < INT_DIV).
    Conflict between rule 33 and token CMP_NE resolved as reduce (CMP_NE < INT_DIV).
    Conflict between rule 33 and token SHL resolved as reduce (SHL < INT_DIV).
    Conflict between rule 33 and token ARITH_SHR resolved as reduce (ARITH_SHR < INT_DIV).
    Conflict between rule 33 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < INT_DIV).
    Conflict between rule 33 and token '?' resolved as reduce ('?' < INT_DIV).
    Conflict between rule 33 and token '|' resolved as reduce ('|' < INT_DIV).
    Conflict between rule 33 and token '^' resolved as reduce ('^' < INT_DIV).
    Conflict between rule 33 and token '&' resolved as reduce ('&' < INT_DIV).
    Conflict between rule 33 and token '>' resolved as reduce ('>' < INT_DIV).
    Conflict between rule 33 and token '<' resolved as reduce ('<' < INT_DIV).
    Conflict between rule 33 and token '+' resolved as reduce ('+' < INT_DIV).
    Conflict between rule 33 and token '-' resolved as reduce ('-' < INT_DIV).
    Conflict between rule 33 and token '*' resolved as reduce (%left '*').
    Conflict between rule 33 and token '/' resolved as reduce (%left '/').
    Conflict between rule 33 and token '%' resolved as reduce (%left '%').
    Conflict between rule 33 and token '[' resolved as shift (INT_DIV < '[').


State 210

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   51         | Expression LOGIC_OR Expression •  [$end, NEWLINE, LOGIC_OR, ELLIPSIS, ',', ':', '?', '@', ']', ')', '=', '}']
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 51 (BinaryOp)

    Conflict between rule 51 and token POWER resolved as shift (LOGIC_OR < POWER).
    Conflict between rule 51 and token INT_DIV resolved as shift (LOGIC_OR < INT_DIV).
    Conflict between rule 51 and token LOGIC_OR resolved as reduce (%left LOGIC_OR).
    Conflict between rule 51 and token LOGIC_AND resolved as shift (LOGIC_OR < LOGIC_AND).
    Conflict between rule 51 and token LOGIC_XOR resolved as shift (LOGIC_OR < LOGIC_XOR).
    Conflict between rule 51 and token CMP_GE resolved as shift (LOGIC_OR < CMP_GE).
    Conflict between rule 51 and token CMP_LE resolved as shift (LOGIC_OR < CMP_LE).
    Conflict between rule 51 and token CMP_EQ resolved as shift (LOGIC_OR < CMP_EQ).
    Conflict between rule 51 and token CMP_NE resolved as shift (LOGIC_OR < CMP_NE).
    Conflict between rule 51 and token SHL resolved as shift (LOGIC_OR < SHL).
    Conflict between rule 51 and token ARITH_SHR resolved as shift (LOGIC_OR < ARITH_SHR).
    Conflict between rule 51 and token LOGIC_SHR resolved as shift (LOGIC_OR < LOGIC_SHR).
    Conflict between rule 51 and token '?' resolved as reduce ('?' < LOGIC_OR).
    Conflict between rule 51 and token '|' resolved as shift (LOGIC_OR < '|').
    Conflict between rule 51 and token '^' resolved as shift (LOGIC_OR < '^').
    Conflict between rule 51 and token '&' resolved as shift (LOGIC_OR < '&').
    Conflict between rule 51 and token '>' resolved as shift (LOGIC_OR < '>').
    Conflict between rule 51 and token '<' resolved as shift (LOGIC_OR < '<').
    Conflict between rule 51 and token '+' resolved as shift (LOGIC_OR < '+').
    Conflict between rule 51 and token '-' resolved as shift (LOGIC_OR < '-').
    Conflict between rule 51 and token '*' resolved as shift (LOGIC_OR < '*').
    Conflict between rule 51 and token '/' resolved as shift (LOGIC_OR < '/').
    Conflict between rule 51 and token '%' resolved as shift (LOGIC_OR < '%').
    Conflict between rule 51 and token '[' resolved as shift (LOGIC_OR < '[').


State 211

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   49         | Expression LOGIC_AND Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, ELLIPSIS, ',', ':', '?', '@', ']', ')', '=', '}']
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 49 (BinaryOp)

    Conflict between rule 49 and token POWER resolved as shift (LOGIC_AND < POWER).
    Conflict between rule 49 and token INT_DIV resolved as shift (LOGIC_AND < INT_DIV).
    Conflict between rule 49 and token LOGIC_OR resolved as reduce (LOGIC_OR < LOGIC_AND).
    Conflict between rule 49 and token LOGIC_AND resolved as reduce (%left LOGIC_AND).
    Conflict between rule 49 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < LOGIC_AND).
    Conflict between rule 49 and token CMP_GE resolved as shift (LOGIC_AND < CMP_GE).
    Conflict between rule 49 and token CMP_LE resolved as shift (LOGIC_AND < CMP_LE).
    Conflict between rule 49 and token CMP_EQ resolved as shift (LOGIC_AND < CMP_EQ).
    Conflict between rule 49 and token CMP_NE resolved as shift (LOGIC_AND < CMP_NE).
    Conflict between rule 49 and token SHL resolved as shift (LOGIC_AND < SHL).
    Conflict between rule 49 and token ARITH_SHR resolved as shift (LOGIC_AND < ARITH_SHR).
    Conflict between rule 49 and token LOGIC_SHR resolved as shift (LOGIC_AND < LOGIC_SHR).
    Conflict between rule 49 and token '?' resolved as reduce ('?' < LOGIC_AND).
    Conflict between rule 49 and token '|' resolved as shift (LOGIC_AND < '|').
    Conflict between rule 49 and token '^' resolved as shift (LOGIC_AND < '^').
    Conflict between rule 49 and token '&' resolved as shift (LOGIC_AND < '&').
    Conflict between rule 49 and token '>' resolved as shift (LOGIC_AND < '>').
    Conflict between rule 49 and token '<' resolved as shift (LOGIC_AND < '<').
    Conflict between rule 49 and token '+' resolved as shift (LOGIC_AND < '+').
    Conflict between rule 49 and token '-' resolved as shift (LOGIC_AND < '-').
    Conflict between rule 49 and token '*' resolved as shift (LOGIC_AND < '*').
    Conflict between rule 49 and token '/' resolved as shift (LOGIC_AND < '/').
    Conflict between rule 49 and token '%' resolved as shift (LOGIC_AND < '%').
    Conflict between rule 49 and token '[' resolved as shift (LOGIC_AND < '[').


State 212

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   50         | Expression LOGIC_XOR Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_XOR, ELLIPSIS, ',', ':', '?', '@', ']', ')', '=', '}']
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_AND  shift, and go to state 122
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 50 (BinaryOp)

    Conflict between rule 50 and token POWER resolved as shift (LOGIC_XOR < POWER).
    Conflict between rule 50 and token INT_DIV resolved as shift (LOGIC_XOR < INT_DIV).
    Conflict between rule 50 and token LOGIC_OR resolved as reduce (LOGIC_OR < LOGIC_XOR).
    Conflict between rule 50 and token LOGIC_AND resolved as shift (LOGIC_XOR < LOGIC_AND).
    Conflict between rule 50 and token LOGIC_XOR resolved as reduce (%left LOGIC_XOR).
    Conflict between rule 50 and token CMP_GE resolved as shift (LOGIC_XOR < CMP_GE).
    Conflict between rule 50 and token CMP_LE resolved as shift (LOGIC_XOR < CMP_LE).
    Conflict between rule 50 and token CMP_EQ resolved as shift (LOGIC_XOR < CMP_EQ).
    Conflict between rule 50 and token CMP_NE resolved as shift (LOGIC_XOR < CMP_NE).
    Conflict between rule 50 and token SHL resolved as shift (LOGIC_XOR < SHL).
    Conflict between rule 50 and token ARITH_SHR resolved as shift (LOGIC_XOR < ARITH_SHR).
    Conflict between rule 50 and token LOGIC_SHR resolved as shift (LOGIC_XOR < LOGIC_SHR).
    Conflict between rule 50 and token '?' resolved as reduce ('?' < LOGIC_XOR).
    Conflict between rule 50 and token '|' resolved as shift (LOGIC_XOR < '|').
    Conflict between rule 50 and token '^' resolved as shift (LOGIC_XOR < '^').
    Conflict between rule 50 and token '&' resolved as shift (LOGIC_XOR < '&').
    Conflict between rule 50 and token '>' resolved as shift (LOGIC_XOR < '>').
    Conflict between rule 50 and token '<' resolved as shift (LOGIC_XOR < '<').
    Conflict between rule 50 and token '+' resolved as shift (LOGIC_XOR < '+').
    Conflict between rule 50 and token '-' resolved as shift (LOGIC_XOR < '-').
    Conflict between rule 50 and token '*' resolved as shift (LOGIC_XOR < '*').
    Conflict between rule 50 and token '/' resolved as shift (LOGIC_XOR < '/').
    Conflict between rule 50 and token '%' resolved as shift (LOGIC_XOR < '%').
    Conflict between rule 50 and token '[' resolved as shift (LOGIC_XOR < '[').


State 213

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   43         | Expression CMP_GE Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '@', ']', ')', '=', '}']
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 43 (BinaryOp)

    Conflict between rule 43 and token POWER resolved as shift (CMP_GE < POWER).
    Conflict between rule 43 and token INT_DIV resolved as shift (CMP_GE < INT_DIV).
    Conflict between rule 43 and token LOGIC_OR resolved as reduce (LOGIC_OR < CMP_GE).
    Conflict between rule 43 and token LOGIC_AND resolved as reduce (LOGIC_AND < CMP_GE).
    Conflict between rule 43 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < CMP_GE).
    Conflict between rule 43 and token CMP_GE resolved as reduce (%left CMP_GE).
    Conflict between rule 43 and token CMP_LE resolved as reduce (%left CMP_LE).
    Conflict between rule 43 and token CMP_EQ resolved as reduce (CMP_EQ < CMP_GE).
    Conflict between rule 43 and token CMP_NE resolved as reduce (CMP_NE < CMP_GE).
    Conflict between rule 43 and token SHL resolved as shift (CMP_GE < SHL).
    Conflict between rule 43 and token ARITH_SHR resolved as shift (CMP_GE < ARITH_SHR).
    Conflict between rule 43 and token LOGIC_SHR resolved as shift (CMP_GE < LOGIC_SHR).
    Conflict between rule 43 and token '?' resolved as reduce ('?' < CMP_GE).
    Conflict between rule 43 and token '|' resolved as reduce ('|' < CMP_GE).
    Conflict between rule 43 and token '^' resolved as reduce ('^' < CMP_GE).
    Conflict between rule 43 and token '&' resolved as reduce ('&' < CMP_GE).
    Conflict between rule 43 and token '>' resolved as reduce (%left '>').
    Conflict between rule 43 and token '<' resolved as reduce (%left '<').
    Conflict between rule 43 and token '+' resolved as shift (CMP_GE < '+').
    Conflict between rule 43 and token '-' resolved as shift (CMP_GE < '-').
    Conflict between rule 43 and token '*' resolved as shift (CMP_GE < '*').
    Conflict between rule 43 and token '/' resolved as shift (CMP_GE < '/').
    Conflict between rule 43 and token '%' resolved as shift (CMP_GE < '%').
    Conflict between rule 43 and token '[' resolved as shift (CMP_GE < '[').


State 214

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   45         | Expression CMP_LE Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '@', ']', ')', '=', '}']
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 45 (BinaryOp)

    Conflict between rule 45 and token POWER resolved as shift (CMP_LE < POWER).
    Conflict between rule 45 and token INT_DIV resolved as shift (CMP_LE < INT_DIV).
    Conflict between rule 45 and token LOGIC_OR resolved as reduce (LOGIC_OR < CMP_LE).
    Conflict between rule 45 and token LOGIC_AND resolved as reduce (LOGIC_AND < CMP_LE).
    Conflict between rule 45 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < CMP_LE).
    Conflict between rule 45 and token CMP_GE resolved as reduce (%left CMP_GE).
    Conflict between rule 45 and token CMP_LE resolved as reduce (%left CMP_LE).
    Conflict between rule 45 and token CMP_EQ resolved as reduce (CMP_EQ < CMP_LE).
    Conflict between rule 45 and token CMP_NE resolved as reduce (CMP_NE < CMP_LE).
    Conflict between rule 45 and token SHL resolved as shift (CMP_LE < SHL).
    Conflict between rule 45 and token ARITH_SHR resolved as shift (CMP_LE < ARITH_SHR).
    Conflict between rule 45 and token LOGIC_SHR resolved as shift (CMP_LE < LOGIC_SHR).
    Conflict between rule 45 and token '?' resolved as reduce ('?' < CMP_LE).
    Conflict between rule 45 and token '|' resolved as reduce ('|' < CMP_LE).
    Conflict between rule 45 and token '^' resolved as reduce ('^' < CMP_LE).
    Conflict between rule 45 and token '&' resolved as reduce ('&' < CMP_LE).
    Conflict between rule 45 and token '>' resolved as reduce (%left '>').
    Conflict between rule 45 and token '<' resolved as reduce (%left '<').
    Conflict between rule 45 and token '+' resolved as shift (CMP_LE < '+').
    Conflict between rule 45 and token '-' resolved as shift (CMP_LE < '-').
    Conflict between rule 45 and token '*' resolved as shift (CMP_LE < '*').
    Conflict between rule 45 and token '/' resolved as shift (CMP_LE < '/').
    Conflict between rule 45 and token '%' resolved as shift (CMP_LE < '%').
    Conflict between rule 45 and token '[' resolved as shift (CMP_LE < '[').


State 215

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   40         | Expression CMP_EQ Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_EQ, CMP_NE, ELLIPSIS, ',', ':', '?', '|', '^', '&', '@', ']', ')', '=', '}']
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 40 (BinaryOp)

    Conflict between rule 40 and token POWER resolved as shift (CMP_EQ < POWER).
    Conflict between rule 40 and token INT_DIV resolved as shift (CMP_EQ < INT_DIV).
    Conflict between rule 40 and token LOGIC_OR resolved as reduce (LOGIC_OR < CMP_EQ).
    Conflict between rule 40 and token LOGIC_AND resolved as reduce (LOGIC_AND < CMP_EQ).
    Conflict between rule 40 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < CMP_EQ).
    Conflict between rule 40 and token CMP_GE resolved as shift (CMP_EQ < CMP_GE).
    Conflict between rule 40 and token CMP_LE resolved as shift (CMP_EQ < CMP_LE).
    Conflict between rule 40 and token CMP_EQ resolved as reduce (%left CMP_EQ).
    Conflict between rule 40 and token CMP_NE resolved as reduce (%left CMP_NE).
    Conflict between rule 40 and token SHL resolved as shift (CMP_EQ < SHL).
    Conflict between rule 40 and token ARITH_SHR resolved as shift (CMP_EQ < ARITH_SHR).
    Conflict between rule 40 and token LOGIC_SHR resolved as shift (CMP_EQ < LOGIC_SHR).
    Conflict between rule 40 and token '?' resolved as reduce ('?' < CMP_EQ).
    Conflict between rule 40 and token '|' resolved as reduce ('|' < CMP_EQ).
    Conflict between rule 40 and token '^' resolved as reduce ('^' < CMP_EQ).
    Conflict between rule 40 and token '&' resolved as reduce ('&' < CMP_EQ).
    Conflict between rule 40 and token '>' resolved as shift (CMP_EQ < '>').
    Conflict between rule 40 and token '<' resolved as shift (CMP_EQ < '<').
    Conflict between rule 40 and token '+' resolved as shift (CMP_EQ < '+').
    Conflict between rule 40 and token '-' resolved as shift (CMP_EQ < '-').
    Conflict between rule 40 and token '*' resolved as shift (CMP_EQ < '*').
    Conflict between rule 40 and token '/' resolved as shift (CMP_EQ < '/').
    Conflict between rule 40 and token '%' resolved as shift (CMP_EQ < '%').
    Conflict between rule 40 and token '[' resolved as shift (CMP_EQ < '[').


State 216

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   41         | Expression CMP_NE Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_EQ, CMP_NE, ELLIPSIS, ',', ':', '?', '|', '^', '&', '@', ']', ')', '=', '}']
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 41 (BinaryOp)

    Conflict between rule 41 and token POWER resolved as shift (CMP_NE < POWER).
    Conflict between rule 41 and token INT_DIV resolved as shift (CMP_NE < INT_DIV).
    Conflict between rule 41 and token LOGIC_OR resolved as reduce (LOGIC_OR < CMP_NE).
    Conflict between rule 41 and token LOGIC_AND resolved as reduce (LOGIC_AND < CMP_NE).
    Conflict between rule 41 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < CMP_NE).
    Conflict between rule 41 and token CMP_GE resolved as shift (CMP_NE < CMP_GE).
    Conflict between rule 41 and token CMP_LE resolved as shift (CMP_NE < CMP_LE).
    Conflict between rule 41 and token CMP_EQ resolved as reduce (%left CMP_EQ).
    Conflict between rule 41 and token CMP_NE resolved as reduce (%left CMP_NE).
    Conflict between rule 41 and token SHL resolved as shift (CMP_NE < SHL).
    Conflict between rule 41 and token ARITH_SHR resolved as shift (CMP_NE < ARITH_SHR).
    Conflict between rule 41 and token LOGIC_SHR resolved as shift (CMP_NE < LOGIC_SHR).
    Conflict between rule 41 and token '?' resolved as reduce ('?' < CMP_NE).
    Conflict between rule 41 and token '|' resolved as reduce ('|' < CMP_NE).
    Conflict between rule 41 and token '^' resolved as reduce ('^' < CMP_NE).
    Conflict between rule 41 and token '&' resolved as reduce ('&' < CMP_NE).
    Conflict between rule 41 and token '>' resolved as shift (CMP_NE < '>').
    Conflict between rule 41 and token '<' resolved as shift (CMP_NE < '<').
    Conflict between rule 41 and token '+' resolved as shift (CMP_NE < '+').
    Conflict between rule 41 and token '-' resolved as shift (CMP_NE < '-').
    Conflict between rule 41 and token '*' resolved as shift (CMP_NE < '*').
    Conflict between rule 41 and token '/' resolved as shift (CMP_NE < '/').
    Conflict between rule 41 and token '%' resolved as shift (CMP_NE < '%').
    Conflict between rule 41 and token '[' resolved as shift (CMP_NE < '[').


State 217

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   37         | Expression SHL Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '@', ']', ')', '=', '}']
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER    shift, and go to state 119
    INT_DIV  shift, and go to state 120
    '+'      shift, and go to state 137
    '-'      shift, and go to state 138
    '*'      shift, and go to state 139
    '/'      shift, and go to state 140
    '%'      shift, and go to state 141
    '['      shift, and go to state 142

    $default  reduce using rule 37 (BinaryOp)

    Conflict between rule 37 and token POWER resolved as shift (SHL < POWER).
    Conflict between rule 37 and token INT_DIV resolved as shift (SHL < INT_DIV).
    Conflict between rule 37 and token LOGIC_OR resolved as reduce (LOGIC_OR < SHL).
    Conflict between rule 37 and token LOGIC_AND resolved as reduce (LOGIC_AND < SHL).
    Conflict between rule 37 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < SHL).
    Conflict between rule 37 and token CMP_GE resolved as reduce (CMP_GE < SHL).
    Conflict between rule 37 and token CMP_LE resolved as reduce (CMP_LE < SHL).
    Conflict between rule 37 and token CMP_EQ resolved as reduce (CMP_EQ < SHL).
    Conflict between rule 37 and token CMP_NE resolved as reduce (CMP_NE < SHL).
    Conflict between rule 37 and token SHL resolved as reduce (%left SHL).
    Conflict between rule 37 and token ARITH_SHR resolved as reduce (%left ARITH_SHR).
    Conflict between rule 37 and token LOGIC_SHR resolved as reduce (%left LOGIC_SHR).
    Conflict between rule 37 and token '?' resolved as reduce ('?' < SHL).
    Conflict between rule 37 and token '|' resolved as reduce ('|' < SHL).
    Conflict between rule 37 and token '^' resolved as reduce ('^' < SHL).
    Conflict between rule 37 and token '&' resolved as reduce ('&' < SHL).
    Conflict between rule 37 and token '>' resolved as reduce ('>' < SHL).
    Conflict between rule 37 and token '<' resolved as reduce ('<' < SHL).
    Conflict between rule 37 and token '+' resolved as shift (SHL < '+').
    Conflict between rule 37 and token '-' resolved as shift (SHL < '-').
    Conflict between rule 37 and token '*' resolved as shift (SHL < '*').
    Conflict between rule 37 and token '/' resolved as shift (SHL < '/').
    Conflict between rule 37 and token '%' resolved as shift (SHL < '%').
    Conflict between rule 37 and token '[' resolved as shift (SHL < '[').


State 218

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   38         | Expression ARITH_SHR Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '@', ']', ')', '=', '}']
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER    shift, and go to state 119
    INT_DIV  shift, and go to state 120
    '+'      shift, and go to state 137
    '-'      shift, and go to state 138
    '*'      shift, and go to state 139
    '/'      shift, and go to state 140
    '%'      shift, and go to state 141
    '['      shift, and go to state 142

    $default  reduce using rule 38 (BinaryOp)

    Conflict between rule 38 and token POWER resolved as shift (ARITH_SHR < POWER).
    Conflict between rule 38 and token INT_DIV resolved as shift (ARITH_SHR < INT_DIV).
    Conflict between rule 38 and token LOGIC_OR resolved as reduce (LOGIC_OR < ARITH_SHR).
    Conflict between rule 38 and token LOGIC_AND resolved as reduce (LOGIC_AND < ARITH_SHR).
    Conflict between rule 38 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < ARITH_SHR).
    Conflict between rule 38 and token CMP_GE resolved as reduce (CMP_GE < ARITH_SHR).
    Conflict between rule 38 and token CMP_LE resolved as reduce (CMP_LE < ARITH_SHR).
    Conflict between rule 38 and token CMP_EQ resolved as reduce (CMP_EQ < ARITH_SHR).
    Conflict between rule 38 and token CMP_NE resolved as reduce (CMP_NE < ARITH_SHR).
    Conflict between rule 38 and token SHL resolved as reduce (%left SHL).
    Conflict between rule 38 and token ARITH_SHR resolved as reduce (%left ARITH_SHR).
    Conflict between rule 38 and token LOGIC_SHR resolved as reduce (%left LOGIC_SHR).
    Conflict between rule 38 and token '?' resolved as reduce ('?' < ARITH_SHR).
    Conflict between rule 38 and token '|' resolved as reduce ('|' < ARITH_SHR).
    Conflict between rule 38 and token '^' resolved as reduce ('^' < ARITH_SHR).
    Conflict between rule 38 and token '&' resolved as reduce ('&' < ARITH_SHR).
    Conflict between rule 38 and token '>' resolved as reduce ('>' < ARITH_SHR).
    Conflict between rule 38 and token '<' resolved as reduce ('<' < ARITH_SHR).
    Conflict between rule 38 and token '+' resolved as shift (ARITH_SHR < '+').
    Conflict between rule 38 and token '-' resolved as shift (ARITH_SHR < '-').
    Conflict between rule 38 and token '*' resolved as shift (ARITH_SHR < '*').
    Conflict between rule 38 and token '/' resolved as shift (ARITH_SHR < '/').
    Conflict between rule 38 and token '%' resolved as shift (ARITH_SHR < '%').
    Conflict between rule 38 and token '[' resolved as shift (ARITH_SHR < '[').


State 219

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   39         | Expression LOGIC_SHR Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '@', ']', ')', '=', '}']
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER    shift, and go to state 119
    INT_DIV  shift, and go to state 120
    '+'      shift, and go to state 137
    '-'      shift, and go to state 138
    '*'      shift, and go to state 139
    '/'      shift, and go to state 140
    '%'      shift, and go to state 141
    '['      shift, and go to state 142

    $default  reduce using rule 39 (BinaryOp)

    Conflict between rule 39 and token POWER resolved as shift (LOGIC_SHR < POWER).
    Conflict between rule 39 and token INT_DIV resolved as shift (LOGIC_SHR < INT_DIV).
    Conflict between rule 39 and token LOGIC_OR resolved as reduce (LOGIC_OR < LOGIC_SHR).
    Conflict between rule 39 and token LOGIC_AND resolved as reduce (LOGIC_AND < LOGIC_SHR).
    Conflict between rule 39 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < LOGIC_SHR).
    Conflict between rule 39 and token CMP_GE resolved as reduce (CMP_GE < LOGIC_SHR).
    Conflict between rule 39 and token CMP_LE resolved as reduce (CMP_LE < LOGIC_SHR).
    Conflict between rule 39 and token CMP_EQ resolved as reduce (CMP_EQ < LOGIC_SHR).
    Conflict between rule 39 and token CMP_NE resolved as reduce (CMP_NE < LOGIC_SHR).
    Conflict between rule 39 and token SHL resolved as reduce (%left SHL).
    Conflict between rule 39 and token ARITH_SHR resolved as reduce (%left ARITH_SHR).
    Conflict between rule 39 and token LOGIC_SHR resolved as reduce (%left LOGIC_SHR).
    Conflict between rule 39 and token '?' resolved as reduce ('?' < LOGIC_SHR).
    Conflict between rule 39 and token '|' resolved as reduce ('|' < LOGIC_SHR).
    Conflict between rule 39 and token '^' resolved as reduce ('^' < LOGIC_SHR).
    Conflict between rule 39 and token '&' resolved as reduce ('&' < LOGIC_SHR).
    Conflict between rule 39 and token '>' resolved as reduce ('>' < LOGIC_SHR).
    Conflict between rule 39 and token '<' resolved as reduce ('<' < LOGIC_SHR).
    Conflict between rule 39 and token '+' resolved as shift (LOGIC_SHR < '+').
    Conflict between rule 39 and token '-' resolved as shift (LOGIC_SHR < '-').
    Conflict between rule 39 and token '*' resolved as shift (LOGIC_SHR < '*').
    Conflict between rule 39 and token '/' resolved as shift (LOGIC_SHR < '/').
    Conflict between rule 39 and token '%' resolved as shift (LOGIC_SHR < '%').
    Conflict between rule 39 and token '[' resolved as shift (LOGIC_SHR < '[').


State 220

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
   52          | Expression '?' Expression • ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    ':'        shift, and go to state 285
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142


State 221

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   48         | Expression '|' Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, ELLIPSIS, ',', ':', '?', '|', '@', ']', ')', '=', '}']
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 48 (BinaryOp)

    Conflict between rule 48 and token POWER resolved as shift ('|' < POWER).
    Conflict between rule 48 and token INT_DIV resolved as shift ('|' < INT_DIV).
    Conflict between rule 48 and token LOGIC_OR resolved as reduce (LOGIC_OR < '|').
    Conflict between rule 48 and token LOGIC_AND resolved as reduce (LOGIC_AND < '|').
    Conflict between rule 48 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '|').
    Conflict between rule 48 and token CMP_GE resolved as shift ('|' < CMP_GE).
    Conflict between rule 48 and token CMP_LE resolved as shift ('|' < CMP_LE).
    Conflict between rule 48 and token CMP_EQ resolved as shift ('|' < CMP_EQ).
    Conflict between rule 48 and token CMP_NE resolved as shift ('|' < CMP_NE).
    Conflict between rule 48 and token SHL resolved as shift ('|' < SHL).
    Conflict between rule 48 and token ARITH_SHR resolved as shift ('|' < ARITH_SHR).
    Conflict between rule 48 and token LOGIC_SHR resolved as shift ('|' < LOGIC_SHR).
    Conflict between rule 48 and token '?' resolved as reduce ('?' < '|').
    Conflict between rule 48 and token '|' resolved as reduce (%left '|').
    Conflict between rule 48 and token '^' resolved as shift ('|' < '^').
    Conflict between rule 48 and token '&' resolved as shift ('|' < '&').
    Conflict between rule 48 and token '>' resolved as shift ('|' < '>').
    Conflict between rule 48 and token '<' resolved as shift ('|' < '<').
    Conflict between rule 48 and token '+' resolved as shift ('|' < '+').
    Conflict between rule 48 and token '-' resolved as shift ('|' < '-').
    Conflict between rule 48 and token '*' resolved as shift ('|' < '*').
    Conflict between rule 48 and token '/' resolved as shift ('|' < '/').
    Conflict between rule 48 and token '%' resolved as shift ('|' < '%').
    Conflict between rule 48 and token '[' resolved as shift ('|' < '[').


State 222

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   47         | Expression '^' Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, ELLIPSIS, ',', ':', '?', '|', '^', '@', ']', ')', '=', '}']
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 47 (BinaryOp)

    Conflict between rule 47 and token POWER resolved as shift ('^' < POWER).
    Conflict between rule 47 and token INT_DIV resolved as shift ('^' < INT_DIV).
    Conflict between rule 47 and token LOGIC_OR resolved as reduce (LOGIC_OR < '^').
    Conflict between rule 47 and token LOGIC_AND resolved as reduce (LOGIC_AND < '^').
    Conflict between rule 47 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '^').
    Conflict between rule 47 and token CMP_GE resolved as shift ('^' < CMP_GE).
    Conflict between rule 47 and token CMP_LE resolved as shift ('^' < CMP_LE).
    Conflict between rule 47 and token CMP_EQ resolved as shift ('^' < CMP_EQ).
    Conflict between rule 47 and token CMP_NE resolved as shift ('^' < CMP_NE).
    Conflict between rule 47 and token SHL resolved as shift ('^' < SHL).
    Conflict between rule 47 and token ARITH_SHR resolved as shift ('^' < ARITH_SHR).
    Conflict between rule 47 and token LOGIC_SHR resolved as shift ('^' < LOGIC_SHR).
    Conflict between rule 47 and token '?' resolved as reduce ('?' < '^').
    Conflict between rule 47 and token '|' resolved as reduce ('|' < '^').
    Conflict between rule 47 and token '^' resolved as reduce (%left '^').
    Conflict between rule 47 and token '&' resolved as shift ('^' < '&').
    Conflict between rule 47 and token '>' resolved as shift ('^' < '>').
    Conflict between rule 47 and token '<' resolved as shift ('^' < '<').
    Conflict between rule 47 and token '+' resolved as shift ('^' < '+').
    Conflict between rule 47 and token '-' resolved as shift ('^' < '-').
    Conflict between rule 47 and token '*' resolved as shift ('^' < '*').
    Conflict between rule 47 and token '/' resolved as shift ('^' < '/').
    Conflict between rule 47 and token '%' resolved as shift ('^' < '%').
    Conflict between rule 47 and token '[' resolved as shift ('^' < '[').


State 223

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   46         | Expression '&' Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '@', ']', ')', '=', '}']
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 46 (BinaryOp)

    Conflict between rule 46 and token POWER resolved as shift ('&' < POWER).
    Conflict between rule 46 and token INT_DIV resolved as shift ('&' < INT_DIV).
    Conflict between rule 46 and token LOGIC_OR resolved as reduce (LOGIC_OR < '&').
    Conflict between rule 46 and token LOGIC_AND resolved as reduce (LOGIC_AND < '&').
    Conflict between rule 46 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '&').
    Conflict between rule 46 and token CMP_GE resolved as shift ('&' < CMP_GE).
    Conflict between rule 46 and token CMP_LE resolved as shift ('&' < CMP_LE).
    Conflict between rule 46 and token CMP_EQ resolved as shift ('&' < CMP_EQ).
    Conflict between rule 46 and token CMP_NE resolved as shift ('&' < CMP_NE).
    Conflict between rule 46 and token SHL resolved as shift ('&' < SHL).
    Conflict between rule 46 and token ARITH_SHR resolved as shift ('&' < ARITH_SHR).
    Conflict between rule 46 and token LOGIC_SHR resolved as shift ('&' < LOGIC_SHR).
    Conflict between rule 46 and token '?' resolved as reduce ('?' < '&').
    Conflict between rule 46 and token '|' resolved as reduce ('|' < '&').
    Conflict between rule 46 and token '^' resolved as reduce ('^' < '&').
    Conflict between rule 46 and token '&' resolved as reduce (%left '&').
    Conflict between rule 46 and token '>' resolved as shift ('&' < '>').
    Conflict between rule 46 and token '<' resolved as shift ('&' < '<').
    Conflict between rule 46 and token '+' resolved as shift ('&' < '+').
    Conflict between rule 46 and token '-' resolved as shift ('&' < '-').
    Conflict between rule 46 and token '*' resolved as shift ('&' < '*').
    Conflict between rule 46 and token '/' resolved as shift ('&' < '/').
    Conflict between rule 46 and token '%' resolved as shift ('&' < '%').
    Conflict between rule 46 and token '[' resolved as shift ('&' < '[').


State 224

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   42         | Expression '>' Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '@', ']', ')', '=', '}']
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 42 (BinaryOp)

    Conflict between rule 42 and token POWER resolved as shift ('>' < POWER).
    Conflict between rule 42 and token INT_DIV resolved as shift ('>' < INT_DIV).
    Conflict between rule 42 and token LOGIC_OR resolved as reduce (LOGIC_OR < '>').
    Conflict between rule 42 and token LOGIC_AND resolved as reduce (LOGIC_AND < '>').
    Conflict between rule 42 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '>').
    Conflict between rule 42 and token CMP_GE resolved as reduce (%left CMP_GE).
    Conflict between rule 42 and token CMP_LE resolved as reduce (%left CMP_LE).
    Conflict between rule 42 and token CMP_EQ resolved as reduce (CMP_EQ < '>').
    Conflict between rule 42 and token CMP_NE resolved as reduce (CMP_NE < '>').
    Conflict between rule 42 and token SHL resolved as shift ('>' < SHL).
    Conflict between rule 42 and token ARITH_SHR resolved as shift ('>' < ARITH_SHR).
    Conflict between rule 42 and token LOGIC_SHR resolved as shift ('>' < LOGIC_SHR).
    Conflict between rule 42 and token '?' resolved as reduce ('?' < '>').
    Conflict between rule 42 and token '|' resolved as reduce ('|' < '>').
    Conflict between rule 42 and token '^' resolved as reduce ('^' < '>').
    Conflict between rule 42 and token '&' resolved as reduce ('&' < '>').
    Conflict between rule 42 and token '>' resolved as reduce (%left '>').
    Conflict between rule 42 and token '<' resolved as reduce (%left '<').
    Conflict between rule 42 and token '+' resolved as shift ('>' < '+').
    Conflict between rule 42 and token '-' resolved as shift ('>' < '-').
    Conflict between rule 42 and token '*' resolved as shift ('>' < '*').
    Conflict between rule 42 and token '/' resolved as shift ('>' < '/').
    Conflict between rule 42 and token '%' resolved as shift ('>' < '%').
    Conflict between rule 42 and token '[' resolved as shift ('>' < '[').


State 225

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   44         | Expression '<' Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '@', ']', ')', '=', '}']
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 44 (BinaryOp)

    Conflict between rule 44 and token POWER resolved as shift ('<' < POWER).
    Conflict between rule 44 and token INT_DIV resolved as shift ('<' < INT_DIV).
    Conflict between rule 44 and token LOGIC_OR resolved as reduce (LOGIC_OR < '<').
    Conflict between rule 44 and token LOGIC_AND resolved as reduce (LOGIC_AND < '<').
    Conflict between rule 44 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '<').
    Conflict between rule 44 and token CMP_GE resolved as reduce (%left CMP_GE).
    Conflict between rule 44 and token CMP_LE resolved as reduce (%left CMP_LE).
    Conflict between rule 44 and token CMP_EQ resolved as reduce (CMP_EQ < '<').
    Conflict between rule 44 and token CMP_NE resolved as reduce (CMP_NE < '<').
    Conflict between rule 44 and token SHL resolved as shift ('<' < SHL).
    Conflict between rule 44 and token ARITH_SHR resolved as shift ('<' < ARITH_SHR).
    Conflict between rule 44 and token LOGIC_SHR resolved as shift ('<' < LOGIC_SHR).
    Conflict between rule 44 and token '?' resolved as reduce ('?' < '<').
    Conflict between rule 44 and token '|' resolved as reduce ('|' < '<').
    Conflict between rule 44 and token '^' resolved as reduce ('^' < '<').
    Conflict between rule 44 and token '&' resolved as reduce ('&' < '<').
    Conflict between rule 44 and token '>' resolved as reduce (%left '>').
    Conflict between rule 44 and token '<' resolved as reduce (%left '<').
    Conflict between rule 44 and token '+' resolved as shift ('<' < '+').
    Conflict between rule 44 and token '-' resolved as shift ('<' < '-').
    Conflict between rule 44 and token '*' resolved as shift ('<' < '*').
    Conflict between rule 44 and token '/' resolved as shift ('<' < '/').
    Conflict between rule 44 and token '%' resolved as shift ('<' < '%').
    Conflict between rule 44 and token '[' resolved as shift ('<' < '[').


State 226

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   35         | Expression '+' Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '@', ']', ')', '=', '}']
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER    shift, and go to state 119
    INT_DIV  shift, and go to state 120
    '*'      shift, and go to state 139
    '/'      shift, and go to state 140
    '%'      shift, and go to state 141
    '['      shift, and go to state 142

    $default  reduce using rule 35 (BinaryOp)

    Conflict between rule 35 and token POWER resolved as shift ('+' < POWER).
    Conflict between rule 35 and token INT_DIV resolved as shift ('+' < INT_DIV).
    Conflict between rule 35 and token LOGIC_OR resolved as reduce (LOGIC_OR < '+').
    Conflict between rule 35 and token LOGIC_AND resolved as reduce (LOGIC_AND < '+').
    Conflict between rule 35 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '+').
    Conflict between rule 35 and token CMP_GE resolved as reduce (CMP_GE < '+').
    Conflict between rule 35 and token CMP_LE resolved as reduce (CMP_LE < '+').
    Conflict between rule 35 and token CMP_EQ resolved as reduce (CMP_EQ < '+').
    Conflict between rule 35 and token CMP_NE resolved as reduce (CMP_NE < '+').
    Conflict between rule 35 and token SHL resolved as reduce (SHL < '+').
    Conflict between rule 35 and token ARITH_SHR resolved as reduce (ARITH_SHR < '+').
    Conflict between rule 35 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < '+').
    Conflict between rule 35 and token '?' resolved as reduce ('?' < '+').
    Conflict between rule 35 and token '|' resolved as reduce ('|' < '+').
    Conflict between rule 35 and token '^' resolved as reduce ('^' < '+').
    Conflict between rule 35 and token '&' resolved as reduce ('&' < '+').
    Conflict between rule 35 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 35 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 35 and token '+' resolved as reduce (%left '+').
    Conflict between rule 35 and token '-' resolved as reduce (%left '-').
    Conflict between rule 35 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 35 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 35 and token '%' resolved as shift ('+' < '%').
    Conflict between rule 35 and token '[' resolved as shift ('+' < '[').


State 227

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   36         | Expression '-' Expression •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '@', ']', ')', '=', '}']
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER    shift, and go to state 119
    INT_DIV  shift, and go to state 120
    '*'      shift, and go to state 139
    '/'      shift, and go to state 140
    '%'      shift, and go to state 141
    '['      shift, and go to state 142

    $default  reduce using rule 36 (BinaryOp)

    Conflict between rule 36 and token POWER resolved as shift ('-' < POWER).
    Conflict between rule 36 and token INT_DIV resolved as shift ('-' < INT_DIV).
    Conflict between rule 36 and token LOGIC_OR resolved as reduce (LOGIC_OR < '-').
    Conflict between rule 36 and token LOGIC_AND resolved as reduce (LOGIC_AND < '-').
    Conflict between rule 36 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '-').
    Conflict between rule 36 and token CMP_GE resolved as reduce (CMP_GE < '-').
    Conflict between rule 36 and token CMP_LE resolved as reduce (CMP_LE < '-').
    Conflict between rule 36 and token CMP_EQ resolved as reduce (CMP_EQ < '-').
    Conflict between rule 36 and token CMP_NE resolved as reduce (CMP_NE < '-').
    Conflict between rule 36 and token SHL resolved as reduce (SHL < '-').
    Conflict between rule 36 and token ARITH_SHR resolved as reduce (ARITH_SHR < '-').
    Conflict between rule 36 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < '-').
    Conflict between rule 36 and token '?' resolved as reduce ('?' < '-').
    Conflict between rule 36 and token '|' resolved as reduce ('|' < '-').
    Conflict between rule 36 and token '^' resolved as reduce ('^' < '-').
    Conflict between rule 36 and token '&' resolved as reduce ('&' < '-').
    Conflict between rule 36 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 36 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 36 and token '+' resolved as reduce (%left '+').
    Conflict between rule 36 and token '-' resolved as reduce (%left '-').
    Conflict between rule 36 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 36 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 36 and token '%' resolved as shift ('-' < '%').
    Conflict between rule 36 and token '[' resolved as shift ('-' < '[').


State 228

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   31         | Expression '*' Expression •  [$end, NEWLINE, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', ']', ')', '=', '}']
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER  shift, and go to state 119
    '['    shift, and go to state 142

    $default  reduce using rule 31 (BinaryOp)

    Conflict between rule 31 and token POWER resolved as shift ('*' < POWER).
    Conflict between rule 31 and token INT_DIV resolved as reduce (%left INT_DIV).
    Conflict between rule 31 and token LOGIC_OR resolved as reduce (LOGIC_OR < '*').
    Conflict between rule 31 and token LOGIC_AND resolved as reduce (LOGIC_AND < '*').
    Conflict between rule 31 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '*').
    Conflict between rule 31 and token CMP_GE resolved as reduce (CMP_GE < '*').
    Conflict between rule 31 and token CMP_LE resolved as reduce (CMP_LE < '*').
    Conflict between rule 31 and token CMP_EQ resolved as reduce (CMP_EQ < '*').
    Conflict between rule 31 and token CMP_NE resolved as reduce (CMP_NE < '*').
    Conflict between rule 31 and token SHL resolved as reduce (SHL < '*').
    Conflict between rule 31 and token ARITH_SHR resolved as reduce (ARITH_SHR < '*').
    Conflict between rule 31 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < '*').
    Conflict between rule 31 and token '?' resolved as reduce ('?' < '*').
    Conflict between rule 31 and token '|' resolved as reduce ('|' < '*').
    Conflict between rule 31 and token '^' resolved as reduce ('^' < '*').
    Conflict between rule 31 and token '&' resolved as reduce ('&' < '*').
    Conflict between rule 31 and token '>' resolved as reduce ('>' < '*').
    Conflict between rule 31 and token '<' resolved as reduce ('<' < '*').
    Conflict between rule 31 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 31 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 31 and token '*' resolved as reduce (%left '*').
    Conflict between rule 31 and token '/' resolved as reduce (%left '/').
    Conflict between rule 31 and token '%' resolved as reduce (%left '%').
    Conflict between rule 31 and token '[' resolved as shift ('*' < '[').


State 229

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   32         | Expression '/' Expression •  [$end, NEWLINE, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', ']', ')', '=', '}']
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER  shift, and go to state 119
    '['    shift, and go to state 142

    $default  reduce using rule 32 (BinaryOp)

    Conflict between rule 32 and token POWER resolved as shift ('/' < POWER).
    Conflict between rule 32 and token INT_DIV resolved as reduce (%left INT_DIV).
    Conflict between rule 32 and token LOGIC_OR resolved as reduce (LOGIC_OR < '/').
    Conflict between rule 32 and token LOGIC_AND resolved as reduce (LOGIC_AND < '/').
    Conflict between rule 32 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '/').
    Conflict between rule 32 and token CMP_GE resolved as reduce (CMP_GE < '/').
    Conflict between rule 32 and token CMP_LE resolved as reduce (CMP_LE < '/').
    Conflict between rule 32 and token CMP_EQ resolved as reduce (CMP_EQ < '/').
    Conflict between rule 32 and token CMP_NE resolved as reduce (CMP_NE < '/').
    Conflict between rule 32 and token SHL resolved as reduce (SHL < '/').
    Conflict between rule 32 and token ARITH_SHR resolved as reduce (ARITH_SHR < '/').
    Conflict between rule 32 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < '/').
    Conflict between rule 32 and token '?' resolved as reduce ('?' < '/').
    Conflict between rule 32 and token '|' resolved as reduce ('|' < '/').
    Conflict between rule 32 and token '^' resolved as reduce ('^' < '/').
    Conflict between rule 32 and token '&' resolved as reduce ('&' < '/').
    Conflict between rule 32 and token '>' resolved as reduce ('>' < '/').
    Conflict between rule 32 and token '<' resolved as reduce ('<' < '/').
    Conflict between rule 32 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 32 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 32 and token '*' resolved as reduce (%left '*').
    Conflict between rule 32 and token '/' resolved as reduce (%left '/').
    Conflict between rule 32 and token '%' resolved as reduce (%left '%').
    Conflict between rule 32 and token '[' resolved as shift ('/' < '[').


State 230

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   34         | Expression '%' Expression •  [$end, NEWLINE, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ELLIPSIS, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', ']', ')', '=', '}']
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER  shift, and go to state 119
    '['    shift, and go to state 142

    $default  reduce using rule 34 (BinaryOp)

    Conflict between rule 34 and token POWER resolved as shift ('%' < POWER).
    Conflict between rule 34 and token INT_DIV resolved as reduce (%left INT_DIV).
    Conflict between rule 34 and token LOGIC_OR resolved as reduce (LOGIC_OR < '%').
    Conflict between rule 34 and token LOGIC_AND resolved as reduce (LOGIC_AND < '%').
    Conflict between rule 34 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '%').
    Conflict between rule 34 and token CMP_GE resolved as reduce (CMP_GE < '%').
    Conflict between rule 34 and token CMP_LE resolved as reduce (CMP_LE < '%').
    Conflict between rule 34 and token CMP_EQ resolved as reduce (CMP_EQ < '%').
    Conflict between rule 34 and token CMP_NE resolved as reduce (CMP_NE < '%').
    Conflict between rule 34 and token SHL resolved as reduce (SHL < '%').
    Conflict between rule 34 and token ARITH_SHR resolved as reduce (ARITH_SHR < '%').
    Conflict between rule 34 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < '%').
    Conflict between rule 34 and token '?' resolved as reduce ('?' < '%').
    Conflict between rule 34 and token '|' resolved as reduce ('|' < '%').
    Conflict between rule 34 and token '^' resolved as reduce ('^' < '%').
    Conflict between rule 34 and token '&' resolved as reduce ('&' < '%').
    Conflict between rule 34 and token '>' resolved as reduce ('>' < '%').
    Conflict between rule 34 and token '<' resolved as reduce ('<' < '%').
    Conflict between rule 34 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 34 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 34 and token '*' resolved as reduce (%left '*').
    Conflict between rule 34 and token '/' resolved as reduce (%left '/').
    Conflict between rule 34 and token '%' resolved as reduce (%left '%').
    Conflict between rule 34 and token '[' resolved as shift ('%' < '[').


State 231

   21 IndexEntry: IndexItem •

    $default  reduce using rule 21 (IndexEntry)


State 232

   22 IndexEntry: IndexRange •

    $default  reduce using rule 22 (IndexEntry)


State 233

   24 IndexList: IndexEntry •

    $default  reduce using rule 24 (IndexList)


State 234

   23 IndexList: IndexList • ',' IndexEntry
   25 Index: Expression '[' IndexList • ']'

    ','  shift, and go to state 286
    ']'  shift, and go to state 287


State 235

   19 IndexItem: Expression •  [',', ']']
   20 IndexRange: Expression • ':' Expression
   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    ':'        shift, and go to state 288
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 19 (IndexItem)


State 236

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  125 Mapping: MAP Identifier '=' Expression •  [$end, NEWLINE, '@', '}']

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 125 (Mapping)


State 237

  124 Mapping: MAP Expression ',' Identifier •

    $default  reduce using rule 124 (Mapping)


State 238

  127 VariableBody: Identifier ',' VariableBody •

    $default  reduce using rule 127 (VariableBody)


State 239

  126 VariableBody: Identifier ':' Identifier •

    $default  reduce using rule 126 (VariableBody)


State 240

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error
  106 ExpressionListNP: • ExpressionListNP ',' ExpressionNP
  107                 | • ExpressionNP
  116 Instruction: CDASH Identifier ExpressionNP ',' • ExpressionListNP

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral    go to state 90
    FloatLiteral      go to state 91
    MatrixLiteral     go to state 92
    StringLiteral     go to state 93
    JsonLiteral       go to state 94
    Identifier        go to state 95
    FunctionCall      go to state 96
    IndexNP           go to state 97
    UnaryOpNP         go to state 98
    BinaryOpNP        go to state 99
    TernaryOpNP       go to state 100
    ExpressionNP      go to state 104
    ExpressionListNP  go to state 289


State 241

   16 Identifier: • IDENTIFIER
  117 Instruction: COND '(' Expression ')' • Identifier ExpressionListNP

    IDENTIFIER  shift, and go to state 32

    Identifier  go to state 290


State 242

  131 SubStatements: • '{' OptNewline StatementList OptNewline '}'
  132              | • '{' OptNewline '}'
  136 IfElse: IF '(' Expression ')' • SubStatements
  137       | IF '(' Expression ')' • SubStatements ELSE IfElse
  138       | IF '(' Expression ')' • SubStatements ELSE SubStatements

    '{'  shift, and go to state 83

    SubStatements  go to state 291


State 243

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  133 Assignment: Expression '=' • Expression

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 292


State 244

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  139 ForLoop: FOR '(' OptAssignment NEWLINE • Expression NEWLINE OptAssignment ')' SubStatements

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 293


State 245

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  140 ForeachLoop: FOREACH '(' Expression '=' • Expression ELLIPSIS Expression ')' SubStatements

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 294


State 246

  131 SubStatements: • '{' OptNewline StatementList OptNewline '}'
  132              | • '{' OptNewline '}'
  141 WhileLoop: WHILE '(' Expression ')' • SubStatements

    '{'  shift, and go to state 83

    SubStatements  go to state 295


State 247

  132 SubStatements: '{' OptNewline '}' •

    $default  reduce using rule 132 (SubStatements)


State 248

    1 Newline: • Newline NEWLINE
    2        | • NEWLINE
    3 OptNewline: • Newline
    4           | ε •  ['}']
  131 SubStatements: '{' OptNewline StatementList • OptNewline '}'
  160 StatementList: StatementList • Newline AnnotStatement

    NEWLINE  shift, and go to state 2

    $default  reduce using rule 4 (OptNewline)

    Newline     go to state 109
    OptNewline  go to state 296


State 249

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  142 RepeatUntilLoop: REPEAT SubStatements UNTIL '(' • Expression ')'

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 297


State 250

  102 ExpressionNP: '(' Expression ')' •

    $default  reduce using rule 102 (ExpressionNP)


State 251

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   56           | ExpressionNP POWER ExpressionNP •  [$end, NEWLINE, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', '=', '}']
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER  shift, and go to state 163
    '['    shift, and go to state 185

    $default  reduce using rule 56 (BinaryOpNP)

    Conflict between rule 56 and token POWER resolved as shift (%right POWER).
    Conflict between rule 56 and token INT_DIV resolved as reduce (INT_DIV < POWER).
    Conflict between rule 56 and token LOGIC_OR resolved as reduce (LOGIC_OR < POWER).
    Conflict between rule 56 and token LOGIC_AND resolved as reduce (LOGIC_AND < POWER).
    Conflict between rule 56 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < POWER).
    Conflict between rule 56 and token CMP_GE resolved as reduce (CMP_GE < POWER).
    Conflict between rule 56 and token CMP_LE resolved as reduce (CMP_LE < POWER).
    Conflict between rule 56 and token CMP_EQ resolved as reduce (CMP_EQ < POWER).
    Conflict between rule 56 and token CMP_NE resolved as reduce (CMP_NE < POWER).
    Conflict between rule 56 and token SHL resolved as reduce (SHL < POWER).
    Conflict between rule 56 and token ARITH_SHR resolved as reduce (ARITH_SHR < POWER).
    Conflict between rule 56 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < POWER).
    Conflict between rule 56 and token '?' resolved as reduce ('?' < POWER).
    Conflict between rule 56 and token '^' resolved as reduce ('^' < POWER).
    Conflict between rule 56 and token '&' resolved as reduce ('&' < POWER).
    Conflict between rule 56 and token '>' resolved as reduce ('>' < POWER).
    Conflict between rule 56 and token '<' resolved as reduce ('<' < POWER).
    Conflict between rule 56 and token '+' resolved as reduce ('+' < POWER).
    Conflict between rule 56 and token '-' resolved as reduce ('-' < POWER).
    Conflict between rule 56 and token '*' resolved as reduce ('*' < POWER).
    Conflict between rule 56 and token '/' resolved as reduce ('/' < POWER).
    Conflict between rule 56 and token '%' resolved as reduce ('%' < POWER).
    Conflict between rule 56 and token '[' resolved as shift (POWER < '[').


State 252

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   59           | ExpressionNP INT_DIV ExpressionNP •  [$end, NEWLINE, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', '=', '}']
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER  shift, and go to state 163
    '['    shift, and go to state 185

    $default  reduce using rule 59 (BinaryOpNP)

    Conflict between rule 59 and token POWER resolved as shift (INT_DIV < POWER).
    Conflict between rule 59 and token INT_DIV resolved as reduce (%left INT_DIV).
    Conflict between rule 59 and token LOGIC_OR resolved as reduce (LOGIC_OR < INT_DIV).
    Conflict between rule 59 and token LOGIC_AND resolved as reduce (LOGIC_AND < INT_DIV).
    Conflict between rule 59 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < INT_DIV).
    Conflict between rule 59 and token CMP_GE resolved as reduce (CMP_GE < INT_DIV).
    Conflict between rule 59 and token CMP_LE resolved as reduce (CMP_LE < INT_DIV).
    Conflict between rule 59 and token CMP_EQ resolved as reduce (CMP_EQ < INT_DIV).
    Conflict between rule 59 and token CMP_NE resolved as reduce (CMP_NE < INT_DIV).
    Conflict between rule 59 and token SHL resolved as reduce (SHL < INT_DIV).
    Conflict between rule 59 and token ARITH_SHR resolved as reduce (ARITH_SHR < INT_DIV).
    Conflict between rule 59 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < INT_DIV).
    Conflict between rule 59 and token '?' resolved as reduce ('?' < INT_DIV).
    Conflict between rule 59 and token '^' resolved as reduce ('^' < INT_DIV).
    Conflict between rule 59 and token '&' resolved as reduce ('&' < INT_DIV).
    Conflict between rule 59 and token '>' resolved as reduce ('>' < INT_DIV).
    Conflict between rule 59 and token '<' resolved as reduce ('<' < INT_DIV).
    Conflict between rule 59 and token '+' resolved as reduce ('+' < INT_DIV).
    Conflict between rule 59 and token '-' resolved as reduce ('-' < INT_DIV).
    Conflict between rule 59 and token '*' resolved as reduce (%left '*').
    Conflict between rule 59 and token '/' resolved as reduce (%left '/').
    Conflict between rule 59 and token '%' resolved as reduce (%left '%').
    Conflict between rule 59 and token '[' resolved as shift (INT_DIV < '[').


State 253

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   76           | ExpressionNP LOGIC_OR ExpressionNP •  [$end, NEWLINE, LOGIC_OR, ',', ':', '?', '|', '@', '=', '}']
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    LOGIC_AND  shift, and go to state 166
    LOGIC_XOR  shift, and go to state 167
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '^'        shift, and go to state 176
    '&'        shift, and go to state 177
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 76 (BinaryOpNP)

    Conflict between rule 76 and token POWER resolved as shift (LOGIC_OR < POWER).
    Conflict between rule 76 and token INT_DIV resolved as shift (LOGIC_OR < INT_DIV).
    Conflict between rule 76 and token LOGIC_OR resolved as reduce (%left LOGIC_OR).
    Conflict between rule 76 and token LOGIC_AND resolved as shift (LOGIC_OR < LOGIC_AND).
    Conflict between rule 76 and token LOGIC_XOR resolved as shift (LOGIC_OR < LOGIC_XOR).
    Conflict between rule 76 and token CMP_GE resolved as shift (LOGIC_OR < CMP_GE).
    Conflict between rule 76 and token CMP_LE resolved as shift (LOGIC_OR < CMP_LE).
    Conflict between rule 76 and token CMP_EQ resolved as shift (LOGIC_OR < CMP_EQ).
    Conflict between rule 76 and token CMP_NE resolved as shift (LOGIC_OR < CMP_NE).
    Conflict between rule 76 and token SHL resolved as shift (LOGIC_OR < SHL).
    Conflict between rule 76 and token ARITH_SHR resolved as shift (LOGIC_OR < ARITH_SHR).
    Conflict between rule 76 and token LOGIC_SHR resolved as shift (LOGIC_OR < LOGIC_SHR).
    Conflict between rule 76 and token '?' resolved as reduce ('?' < LOGIC_OR).
    Conflict between rule 76 and token '^' resolved as shift (LOGIC_OR < '^').
    Conflict between rule 76 and token '&' resolved as shift (LOGIC_OR < '&').
    Conflict between rule 76 and token '>' resolved as shift (LOGIC_OR < '>').
    Conflict between rule 76 and token '<' resolved as shift (LOGIC_OR < '<').
    Conflict between rule 76 and token '+' resolved as shift (LOGIC_OR < '+').
    Conflict between rule 76 and token '-' resolved as shift (LOGIC_OR < '-').
    Conflict between rule 76 and token '*' resolved as shift (LOGIC_OR < '*').
    Conflict between rule 76 and token '/' resolved as shift (LOGIC_OR < '/').
    Conflict between rule 76 and token '%' resolved as shift (LOGIC_OR < '%').
    Conflict between rule 76 and token '[' resolved as shift (LOGIC_OR < '[').


State 254

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   74           | ExpressionNP LOGIC_AND ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, ',', ':', '?', '|', '@', '=', '}']
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '^'        shift, and go to state 176
    '&'        shift, and go to state 177
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 74 (BinaryOpNP)

    Conflict between rule 74 and token POWER resolved as shift (LOGIC_AND < POWER).
    Conflict between rule 74 and token INT_DIV resolved as shift (LOGIC_AND < INT_DIV).
    Conflict between rule 74 and token LOGIC_OR resolved as reduce (LOGIC_OR < LOGIC_AND).
    Conflict between rule 74 and token LOGIC_AND resolved as reduce (%left LOGIC_AND).
    Conflict between rule 74 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < LOGIC_AND).
    Conflict between rule 74 and token CMP_GE resolved as shift (LOGIC_AND < CMP_GE).
    Conflict between rule 74 and token CMP_LE resolved as shift (LOGIC_AND < CMP_LE).
    Conflict between rule 74 and token CMP_EQ resolved as shift (LOGIC_AND < CMP_EQ).
    Conflict between rule 74 and token CMP_NE resolved as shift (LOGIC_AND < CMP_NE).
    Conflict between rule 74 and token SHL resolved as shift (LOGIC_AND < SHL).
    Conflict between rule 74 and token ARITH_SHR resolved as shift (LOGIC_AND < ARITH_SHR).
    Conflict between rule 74 and token LOGIC_SHR resolved as shift (LOGIC_AND < LOGIC_SHR).
    Conflict between rule 74 and token '?' resolved as reduce ('?' < LOGIC_AND).
    Conflict between rule 74 and token '^' resolved as shift (LOGIC_AND < '^').
    Conflict between rule 74 and token '&' resolved as shift (LOGIC_AND < '&').
    Conflict between rule 74 and token '>' resolved as shift (LOGIC_AND < '>').
    Conflict between rule 74 and token '<' resolved as shift (LOGIC_AND < '<').
    Conflict between rule 74 and token '+' resolved as shift (LOGIC_AND < '+').
    Conflict between rule 74 and token '-' resolved as shift (LOGIC_AND < '-').
    Conflict between rule 74 and token '*' resolved as shift (LOGIC_AND < '*').
    Conflict between rule 74 and token '/' resolved as shift (LOGIC_AND < '/').
    Conflict between rule 74 and token '%' resolved as shift (LOGIC_AND < '%').
    Conflict between rule 74 and token '[' resolved as shift (LOGIC_AND < '[').


State 255

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   75           | ExpressionNP LOGIC_XOR ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_XOR, ',', ':', '?', '|', '@', '=', '}']
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    LOGIC_AND  shift, and go to state 166
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '^'        shift, and go to state 176
    '&'        shift, and go to state 177
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 75 (BinaryOpNP)

    Conflict between rule 75 and token POWER resolved as shift (LOGIC_XOR < POWER).
    Conflict between rule 75 and token INT_DIV resolved as shift (LOGIC_XOR < INT_DIV).
    Conflict between rule 75 and token LOGIC_OR resolved as reduce (LOGIC_OR < LOGIC_XOR).
    Conflict between rule 75 and token LOGIC_AND resolved as shift (LOGIC_XOR < LOGIC_AND).
    Conflict between rule 75 and token LOGIC_XOR resolved as reduce (%left LOGIC_XOR).
    Conflict between rule 75 and token CMP_GE resolved as shift (LOGIC_XOR < CMP_GE).
    Conflict between rule 75 and token CMP_LE resolved as shift (LOGIC_XOR < CMP_LE).
    Conflict between rule 75 and token CMP_EQ resolved as shift (LOGIC_XOR < CMP_EQ).
    Conflict between rule 75 and token CMP_NE resolved as shift (LOGIC_XOR < CMP_NE).
    Conflict between rule 75 and token SHL resolved as shift (LOGIC_XOR < SHL).
    Conflict between rule 75 and token ARITH_SHR resolved as shift (LOGIC_XOR < ARITH_SHR).
    Conflict between rule 75 and token LOGIC_SHR resolved as shift (LOGIC_XOR < LOGIC_SHR).
    Conflict between rule 75 and token '?' resolved as reduce ('?' < LOGIC_XOR).
    Conflict between rule 75 and token '^' resolved as shift (LOGIC_XOR < '^').
    Conflict between rule 75 and token '&' resolved as shift (LOGIC_XOR < '&').
    Conflict between rule 75 and token '>' resolved as shift (LOGIC_XOR < '>').
    Conflict between rule 75 and token '<' resolved as shift (LOGIC_XOR < '<').
    Conflict between rule 75 and token '+' resolved as shift (LOGIC_XOR < '+').
    Conflict between rule 75 and token '-' resolved as shift (LOGIC_XOR < '-').
    Conflict between rule 75 and token '*' resolved as shift (LOGIC_XOR < '*').
    Conflict between rule 75 and token '/' resolved as shift (LOGIC_XOR < '/').
    Conflict between rule 75 and token '%' resolved as shift (LOGIC_XOR < '%').
    Conflict between rule 75 and token '[' resolved as shift (LOGIC_XOR < '[').


State 256

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   69           | ExpressionNP CMP_GE ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, ',', ':', '?', '|', '^', '&', '>', '<', '@', '=', '}']
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 69 (BinaryOpNP)

    Conflict between rule 69 and token POWER resolved as shift (CMP_GE < POWER).
    Conflict between rule 69 and token INT_DIV resolved as shift (CMP_GE < INT_DIV).
    Conflict between rule 69 and token LOGIC_OR resolved as reduce (LOGIC_OR < CMP_GE).
    Conflict between rule 69 and token LOGIC_AND resolved as reduce (LOGIC_AND < CMP_GE).
    Conflict between rule 69 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < CMP_GE).
    Conflict between rule 69 and token CMP_GE resolved as reduce (%left CMP_GE).
    Conflict between rule 69 and token CMP_LE resolved as reduce (%left CMP_LE).
    Conflict between rule 69 and token CMP_EQ resolved as reduce (CMP_EQ < CMP_GE).
    Conflict between rule 69 and token CMP_NE resolved as reduce (CMP_NE < CMP_GE).
    Conflict between rule 69 and token SHL resolved as shift (CMP_GE < SHL).
    Conflict between rule 69 and token ARITH_SHR resolved as shift (CMP_GE < ARITH_SHR).
    Conflict between rule 69 and token LOGIC_SHR resolved as shift (CMP_GE < LOGIC_SHR).
    Conflict between rule 69 and token '?' resolved as reduce ('?' < CMP_GE).
    Conflict between rule 69 and token '^' resolved as reduce ('^' < CMP_GE).
    Conflict between rule 69 and token '&' resolved as reduce ('&' < CMP_GE).
    Conflict between rule 69 and token '>' resolved as reduce (%left '>').
    Conflict between rule 69 and token '<' resolved as reduce (%left '<').
    Conflict between rule 69 and token '+' resolved as shift (CMP_GE < '+').
    Conflict between rule 69 and token '-' resolved as shift (CMP_GE < '-').
    Conflict between rule 69 and token '*' resolved as shift (CMP_GE < '*').
    Conflict between rule 69 and token '/' resolved as shift (CMP_GE < '/').
    Conflict between rule 69 and token '%' resolved as shift (CMP_GE < '%').
    Conflict between rule 69 and token '[' resolved as shift (CMP_GE < '[').


State 257

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   71           | ExpressionNP CMP_LE ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, ',', ':', '?', '|', '^', '&', '>', '<', '@', '=', '}']
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 71 (BinaryOpNP)

    Conflict between rule 71 and token POWER resolved as shift (CMP_LE < POWER).
    Conflict between rule 71 and token INT_DIV resolved as shift (CMP_LE < INT_DIV).
    Conflict between rule 71 and token LOGIC_OR resolved as reduce (LOGIC_OR < CMP_LE).
    Conflict between rule 71 and token LOGIC_AND resolved as reduce (LOGIC_AND < CMP_LE).
    Conflict between rule 71 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < CMP_LE).
    Conflict between rule 71 and token CMP_GE resolved as reduce (%left CMP_GE).
    Conflict between rule 71 and token CMP_LE resolved as reduce (%left CMP_LE).
    Conflict between rule 71 and token CMP_EQ resolved as reduce (CMP_EQ < CMP_LE).
    Conflict between rule 71 and token CMP_NE resolved as reduce (CMP_NE < CMP_LE).
    Conflict between rule 71 and token SHL resolved as shift (CMP_LE < SHL).
    Conflict between rule 71 and token ARITH_SHR resolved as shift (CMP_LE < ARITH_SHR).
    Conflict between rule 71 and token LOGIC_SHR resolved as shift (CMP_LE < LOGIC_SHR).
    Conflict between rule 71 and token '?' resolved as reduce ('?' < CMP_LE).
    Conflict between rule 71 and token '^' resolved as reduce ('^' < CMP_LE).
    Conflict between rule 71 and token '&' resolved as reduce ('&' < CMP_LE).
    Conflict between rule 71 and token '>' resolved as reduce (%left '>').
    Conflict between rule 71 and token '<' resolved as reduce (%left '<').
    Conflict between rule 71 and token '+' resolved as shift (CMP_LE < '+').
    Conflict between rule 71 and token '-' resolved as shift (CMP_LE < '-').
    Conflict between rule 71 and token '*' resolved as shift (CMP_LE < '*').
    Conflict between rule 71 and token '/' resolved as shift (CMP_LE < '/').
    Conflict between rule 71 and token '%' resolved as shift (CMP_LE < '%').
    Conflict between rule 71 and token '[' resolved as shift (CMP_LE < '[').


State 258

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   66           | ExpressionNP CMP_EQ ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_EQ, CMP_NE, ',', ':', '?', '|', '^', '&', '@', '=', '}']
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 66 (BinaryOpNP)

    Conflict between rule 66 and token POWER resolved as shift (CMP_EQ < POWER).
    Conflict between rule 66 and token INT_DIV resolved as shift (CMP_EQ < INT_DIV).
    Conflict between rule 66 and token LOGIC_OR resolved as reduce (LOGIC_OR < CMP_EQ).
    Conflict between rule 66 and token LOGIC_AND resolved as reduce (LOGIC_AND < CMP_EQ).
    Conflict between rule 66 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < CMP_EQ).
    Conflict between rule 66 and token CMP_GE resolved as shift (CMP_EQ < CMP_GE).
    Conflict between rule 66 and token CMP_LE resolved as shift (CMP_EQ < CMP_LE).
    Conflict between rule 66 and token CMP_EQ resolved as reduce (%left CMP_EQ).
    Conflict between rule 66 and token CMP_NE resolved as reduce (%left CMP_NE).
    Conflict between rule 66 and token SHL resolved as shift (CMP_EQ < SHL).
    Conflict between rule 66 and token ARITH_SHR resolved as shift (CMP_EQ < ARITH_SHR).
    Conflict between rule 66 and token LOGIC_SHR resolved as shift (CMP_EQ < LOGIC_SHR).
    Conflict between rule 66 and token '?' resolved as reduce ('?' < CMP_EQ).
    Conflict between rule 66 and token '^' resolved as reduce ('^' < CMP_EQ).
    Conflict between rule 66 and token '&' resolved as reduce ('&' < CMP_EQ).
    Conflict between rule 66 and token '>' resolved as shift (CMP_EQ < '>').
    Conflict between rule 66 and token '<' resolved as shift (CMP_EQ < '<').
    Conflict between rule 66 and token '+' resolved as shift (CMP_EQ < '+').
    Conflict between rule 66 and token '-' resolved as shift (CMP_EQ < '-').
    Conflict between rule 66 and token '*' resolved as shift (CMP_EQ < '*').
    Conflict between rule 66 and token '/' resolved as shift (CMP_EQ < '/').
    Conflict between rule 66 and token '%' resolved as shift (CMP_EQ < '%').
    Conflict between rule 66 and token '[' resolved as shift (CMP_EQ < '[').


State 259

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   67           | ExpressionNP CMP_NE ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_EQ, CMP_NE, ',', ':', '?', '|', '^', '&', '@', '=', '}']
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 67 (BinaryOpNP)

    Conflict between rule 67 and token POWER resolved as shift (CMP_NE < POWER).
    Conflict between rule 67 and token INT_DIV resolved as shift (CMP_NE < INT_DIV).
    Conflict between rule 67 and token LOGIC_OR resolved as reduce (LOGIC_OR < CMP_NE).
    Conflict between rule 67 and token LOGIC_AND resolved as reduce (LOGIC_AND < CMP_NE).
    Conflict between rule 67 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < CMP_NE).
    Conflict between rule 67 and token CMP_GE resolved as shift (CMP_NE < CMP_GE).
    Conflict between rule 67 and token CMP_LE resolved as shift (CMP_NE < CMP_LE).
    Conflict between rule 67 and token CMP_EQ resolved as reduce (%left CMP_EQ).
    Conflict between rule 67 and token CMP_NE resolved as reduce (%left CMP_NE).
    Conflict between rule 67 and token SHL resolved as shift (CMP_NE < SHL).
    Conflict between rule 67 and token ARITH_SHR resolved as shift (CMP_NE < ARITH_SHR).
    Conflict between rule 67 and token LOGIC_SHR resolved as shift (CMP_NE < LOGIC_SHR).
    Conflict between rule 67 and token '?' resolved as reduce ('?' < CMP_NE).
    Conflict between rule 67 and token '^' resolved as reduce ('^' < CMP_NE).
    Conflict between rule 67 and token '&' resolved as reduce ('&' < CMP_NE).
    Conflict between rule 67 and token '>' resolved as shift (CMP_NE < '>').
    Conflict between rule 67 and token '<' resolved as shift (CMP_NE < '<').
    Conflict between rule 67 and token '+' resolved as shift (CMP_NE < '+').
    Conflict between rule 67 and token '-' resolved as shift (CMP_NE < '-').
    Conflict between rule 67 and token '*' resolved as shift (CMP_NE < '*').
    Conflict between rule 67 and token '/' resolved as shift (CMP_NE < '/').
    Conflict between rule 67 and token '%' resolved as shift (CMP_NE < '%').
    Conflict between rule 67 and token '[' resolved as shift (CMP_NE < '[').


State 260

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   63           | ExpressionNP SHL ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '@', '=', '}']
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER    shift, and go to state 163
    INT_DIV  shift, and go to state 164
    '+'      shift, and go to state 180
    '-'      shift, and go to state 181
    '*'      shift, and go to state 182
    '/'      shift, and go to state 183
    '%'      shift, and go to state 184
    '['      shift, and go to state 185

    $default  reduce using rule 63 (BinaryOpNP)

    Conflict between rule 63 and token POWER resolved as shift (SHL < POWER).
    Conflict between rule 63 and token INT_DIV resolved as shift (SHL < INT_DIV).
    Conflict between rule 63 and token LOGIC_OR resolved as reduce (LOGIC_OR < SHL).
    Conflict between rule 63 and token LOGIC_AND resolved as reduce (LOGIC_AND < SHL).
    Conflict between rule 63 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < SHL).
    Conflict between rule 63 and token CMP_GE resolved as reduce (CMP_GE < SHL).
    Conflict between rule 63 and token CMP_LE resolved as reduce (CMP_LE < SHL).
    Conflict between rule 63 and token CMP_EQ resolved as reduce (CMP_EQ < SHL).
    Conflict between rule 63 and token CMP_NE resolved as reduce (CMP_NE < SHL).
    Conflict between rule 63 and token SHL resolved as reduce (%left SHL).
    Conflict between rule 63 and token ARITH_SHR resolved as reduce (%left ARITH_SHR).
    Conflict between rule 63 and token LOGIC_SHR resolved as reduce (%left LOGIC_SHR).
    Conflict between rule 63 and token '?' resolved as reduce ('?' < SHL).
    Conflict between rule 63 and token '^' resolved as reduce ('^' < SHL).
    Conflict between rule 63 and token '&' resolved as reduce ('&' < SHL).
    Conflict between rule 63 and token '>' resolved as reduce ('>' < SHL).
    Conflict between rule 63 and token '<' resolved as reduce ('<' < SHL).
    Conflict between rule 63 and token '+' resolved as shift (SHL < '+').
    Conflict between rule 63 and token '-' resolved as shift (SHL < '-').
    Conflict between rule 63 and token '*' resolved as shift (SHL < '*').
    Conflict between rule 63 and token '/' resolved as shift (SHL < '/').
    Conflict between rule 63 and token '%' resolved as shift (SHL < '%').
    Conflict between rule 63 and token '[' resolved as shift (SHL < '[').


State 261

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   64           | ExpressionNP ARITH_SHR ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '@', '=', '}']
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER    shift, and go to state 163
    INT_DIV  shift, and go to state 164
    '+'      shift, and go to state 180
    '-'      shift, and go to state 181
    '*'      shift, and go to state 182
    '/'      shift, and go to state 183
    '%'      shift, and go to state 184
    '['      shift, and go to state 185

    $default  reduce using rule 64 (BinaryOpNP)

    Conflict between rule 64 and token POWER resolved as shift (ARITH_SHR < POWER).
    Conflict between rule 64 and token INT_DIV resolved as shift (ARITH_SHR < INT_DIV).
    Conflict between rule 64 and token LOGIC_OR resolved as reduce (LOGIC_OR < ARITH_SHR).
    Conflict between rule 64 and token LOGIC_AND resolved as reduce (LOGIC_AND < ARITH_SHR).
    Conflict between rule 64 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < ARITH_SHR).
    Conflict between rule 64 and token CMP_GE resolved as reduce (CMP_GE < ARITH_SHR).
    Conflict between rule 64 and token CMP_LE resolved as reduce (CMP_LE < ARITH_SHR).
    Conflict between rule 64 and token CMP_EQ resolved as reduce (CMP_EQ < ARITH_SHR).
    Conflict between rule 64 and token CMP_NE resolved as reduce (CMP_NE < ARITH_SHR).
    Conflict between rule 64 and token SHL resolved as reduce (%left SHL).
    Conflict between rule 64 and token ARITH_SHR resolved as reduce (%left ARITH_SHR).
    Conflict between rule 64 and token LOGIC_SHR resolved as reduce (%left LOGIC_SHR).
    Conflict between rule 64 and token '?' resolved as reduce ('?' < ARITH_SHR).
    Conflict between rule 64 and token '^' resolved as reduce ('^' < ARITH_SHR).
    Conflict between rule 64 and token '&' resolved as reduce ('&' < ARITH_SHR).
    Conflict between rule 64 and token '>' resolved as reduce ('>' < ARITH_SHR).
    Conflict between rule 64 and token '<' resolved as reduce ('<' < ARITH_SHR).
    Conflict between rule 64 and token '+' resolved as shift (ARITH_SHR < '+').
    Conflict between rule 64 and token '-' resolved as shift (ARITH_SHR < '-').
    Conflict between rule 64 and token '*' resolved as shift (ARITH_SHR < '*').
    Conflict between rule 64 and token '/' resolved as shift (ARITH_SHR < '/').
    Conflict between rule 64 and token '%' resolved as shift (ARITH_SHR < '%').
    Conflict between rule 64 and token '[' resolved as shift (ARITH_SHR < '[').


State 262

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   65           | ExpressionNP LOGIC_SHR ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '@', '=', '}']
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER    shift, and go to state 163
    INT_DIV  shift, and go to state 164
    '+'      shift, and go to state 180
    '-'      shift, and go to state 181
    '*'      shift, and go to state 182
    '/'      shift, and go to state 183
    '%'      shift, and go to state 184
    '['      shift, and go to state 185

    $default  reduce using rule 65 (BinaryOpNP)

    Conflict between rule 65 and token POWER resolved as shift (LOGIC_SHR < POWER).
    Conflict between rule 65 and token INT_DIV resolved as shift (LOGIC_SHR < INT_DIV).
    Conflict between rule 65 and token LOGIC_OR resolved as reduce (LOGIC_OR < LOGIC_SHR).
    Conflict between rule 65 and token LOGIC_AND resolved as reduce (LOGIC_AND < LOGIC_SHR).
    Conflict between rule 65 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < LOGIC_SHR).
    Conflict between rule 65 and token CMP_GE resolved as reduce (CMP_GE < LOGIC_SHR).
    Conflict between rule 65 and token CMP_LE resolved as reduce (CMP_LE < LOGIC_SHR).
    Conflict between rule 65 and token CMP_EQ resolved as reduce (CMP_EQ < LOGIC_SHR).
    Conflict between rule 65 and token CMP_NE resolved as reduce (CMP_NE < LOGIC_SHR).
    Conflict between rule 65 and token SHL resolved as reduce (%left SHL).
    Conflict between rule 65 and token ARITH_SHR resolved as reduce (%left ARITH_SHR).
    Conflict between rule 65 and token LOGIC_SHR resolved as reduce (%left LOGIC_SHR).
    Conflict between rule 65 and token '?' resolved as reduce ('?' < LOGIC_SHR).
    Conflict between rule 65 and token '^' resolved as reduce ('^' < LOGIC_SHR).
    Conflict between rule 65 and token '&' resolved as reduce ('&' < LOGIC_SHR).
    Conflict between rule 65 and token '>' resolved as reduce ('>' < LOGIC_SHR).
    Conflict between rule 65 and token '<' resolved as reduce ('<' < LOGIC_SHR).
    Conflict between rule 65 and token '+' resolved as shift (LOGIC_SHR < '+').
    Conflict between rule 65 and token '-' resolved as shift (LOGIC_SHR < '-').
    Conflict between rule 65 and token '*' resolved as shift (LOGIC_SHR < '*').
    Conflict between rule 65 and token '/' resolved as shift (LOGIC_SHR < '/').
    Conflict between rule 65 and token '%' resolved as shift (LOGIC_SHR < '%').
    Conflict between rule 65 and token '[' resolved as shift (LOGIC_SHR < '[').


State 263

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP
   77            | ExpressionNP '?' ExpressionNP • ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    LOGIC_OR   shift, and go to state 165
    LOGIC_AND  shift, and go to state 166
    LOGIC_XOR  shift, and go to state 167
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    ':'        shift, and go to state 298
    '?'        shift, and go to state 175
    '^'        shift, and go to state 176
    '&'        shift, and go to state 177
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185


State 264

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   73           | ExpressionNP '^' ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, ',', ':', '?', '|', '^', '@', '=', '}']
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '&'        shift, and go to state 177
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 73 (BinaryOpNP)

    Conflict between rule 73 and token POWER resolved as shift ('^' < POWER).
    Conflict between rule 73 and token INT_DIV resolved as shift ('^' < INT_DIV).
    Conflict between rule 73 and token LOGIC_OR resolved as reduce (LOGIC_OR < '^').
    Conflict between rule 73 and token LOGIC_AND resolved as reduce (LOGIC_AND < '^').
    Conflict between rule 73 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '^').
    Conflict between rule 73 and token CMP_GE resolved as shift ('^' < CMP_GE).
    Conflict between rule 73 and token CMP_LE resolved as shift ('^' < CMP_LE).
    Conflict between rule 73 and token CMP_EQ resolved as shift ('^' < CMP_EQ).
    Conflict between rule 73 and token CMP_NE resolved as shift ('^' < CMP_NE).
    Conflict between rule 73 and token SHL resolved as shift ('^' < SHL).
    Conflict between rule 73 and token ARITH_SHR resolved as shift ('^' < ARITH_SHR).
    Conflict between rule 73 and token LOGIC_SHR resolved as shift ('^' < LOGIC_SHR).
    Conflict between rule 73 and token '?' resolved as reduce ('?' < '^').
    Conflict between rule 73 and token '^' resolved as reduce (%left '^').
    Conflict between rule 73 and token '&' resolved as shift ('^' < '&').
    Conflict between rule 73 and token '>' resolved as shift ('^' < '>').
    Conflict between rule 73 and token '<' resolved as shift ('^' < '<').
    Conflict between rule 73 and token '+' resolved as shift ('^' < '+').
    Conflict between rule 73 and token '-' resolved as shift ('^' < '-').
    Conflict between rule 73 and token '*' resolved as shift ('^' < '*').
    Conflict between rule 73 and token '/' resolved as shift ('^' < '/').
    Conflict between rule 73 and token '%' resolved as shift ('^' < '%').
    Conflict between rule 73 and token '[' resolved as shift ('^' < '[').


State 265

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   72           | ExpressionNP '&' ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, ',', ':', '?', '|', '^', '&', '@', '=', '}']
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 72 (BinaryOpNP)

    Conflict between rule 72 and token POWER resolved as shift ('&' < POWER).
    Conflict between rule 72 and token INT_DIV resolved as shift ('&' < INT_DIV).
    Conflict between rule 72 and token LOGIC_OR resolved as reduce (LOGIC_OR < '&').
    Conflict between rule 72 and token LOGIC_AND resolved as reduce (LOGIC_AND < '&').
    Conflict between rule 72 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '&').
    Conflict between rule 72 and token CMP_GE resolved as shift ('&' < CMP_GE).
    Conflict between rule 72 and token CMP_LE resolved as shift ('&' < CMP_LE).
    Conflict between rule 72 and token CMP_EQ resolved as shift ('&' < CMP_EQ).
    Conflict between rule 72 and token CMP_NE resolved as shift ('&' < CMP_NE).
    Conflict between rule 72 and token SHL resolved as shift ('&' < SHL).
    Conflict between rule 72 and token ARITH_SHR resolved as shift ('&' < ARITH_SHR).
    Conflict between rule 72 and token LOGIC_SHR resolved as shift ('&' < LOGIC_SHR).
    Conflict between rule 72 and token '?' resolved as reduce ('?' < '&').
    Conflict between rule 72 and token '^' resolved as reduce ('^' < '&').
    Conflict between rule 72 and token '&' resolved as reduce (%left '&').
    Conflict between rule 72 and token '>' resolved as shift ('&' < '>').
    Conflict between rule 72 and token '<' resolved as shift ('&' < '<').
    Conflict between rule 72 and token '+' resolved as shift ('&' < '+').
    Conflict between rule 72 and token '-' resolved as shift ('&' < '-').
    Conflict between rule 72 and token '*' resolved as shift ('&' < '*').
    Conflict between rule 72 and token '/' resolved as shift ('&' < '/').
    Conflict between rule 72 and token '%' resolved as shift ('&' < '%').
    Conflict between rule 72 and token '[' resolved as shift ('&' < '[').


State 266

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   68           | ExpressionNP '>' ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, ',', ':', '?', '|', '^', '&', '>', '<', '@', '=', '}']
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 68 (BinaryOpNP)

    Conflict between rule 68 and token POWER resolved as shift ('>' < POWER).
    Conflict between rule 68 and token INT_DIV resolved as shift ('>' < INT_DIV).
    Conflict between rule 68 and token LOGIC_OR resolved as reduce (LOGIC_OR < '>').
    Conflict between rule 68 and token LOGIC_AND resolved as reduce (LOGIC_AND < '>').
    Conflict between rule 68 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '>').
    Conflict between rule 68 and token CMP_GE resolved as reduce (%left CMP_GE).
    Conflict between rule 68 and token CMP_LE resolved as reduce (%left CMP_LE).
    Conflict between rule 68 and token CMP_EQ resolved as reduce (CMP_EQ < '>').
    Conflict between rule 68 and token CMP_NE resolved as reduce (CMP_NE < '>').
    Conflict between rule 68 and token SHL resolved as shift ('>' < SHL).
    Conflict between rule 68 and token ARITH_SHR resolved as shift ('>' < ARITH_SHR).
    Conflict between rule 68 and token LOGIC_SHR resolved as shift ('>' < LOGIC_SHR).
    Conflict between rule 68 and token '?' resolved as reduce ('?' < '>').
    Conflict between rule 68 and token '^' resolved as reduce ('^' < '>').
    Conflict between rule 68 and token '&' resolved as reduce ('&' < '>').
    Conflict between rule 68 and token '>' resolved as reduce (%left '>').
    Conflict between rule 68 and token '<' resolved as reduce (%left '<').
    Conflict between rule 68 and token '+' resolved as shift ('>' < '+').
    Conflict between rule 68 and token '-' resolved as shift ('>' < '-').
    Conflict between rule 68 and token '*' resolved as shift ('>' < '*').
    Conflict between rule 68 and token '/' resolved as shift ('>' < '/').
    Conflict between rule 68 and token '%' resolved as shift ('>' < '%').
    Conflict between rule 68 and token '[' resolved as shift ('>' < '[').


State 267

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   70           | ExpressionNP '<' ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, ',', ':', '?', '|', '^', '&', '>', '<', '@', '=', '}']
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 70 (BinaryOpNP)

    Conflict between rule 70 and token POWER resolved as shift ('<' < POWER).
    Conflict between rule 70 and token INT_DIV resolved as shift ('<' < INT_DIV).
    Conflict between rule 70 and token LOGIC_OR resolved as reduce (LOGIC_OR < '<').
    Conflict between rule 70 and token LOGIC_AND resolved as reduce (LOGIC_AND < '<').
    Conflict between rule 70 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '<').
    Conflict between rule 70 and token CMP_GE resolved as reduce (%left CMP_GE).
    Conflict between rule 70 and token CMP_LE resolved as reduce (%left CMP_LE).
    Conflict between rule 70 and token CMP_EQ resolved as reduce (CMP_EQ < '<').
    Conflict between rule 70 and token CMP_NE resolved as reduce (CMP_NE < '<').
    Conflict between rule 70 and token SHL resolved as shift ('<' < SHL).
    Conflict between rule 70 and token ARITH_SHR resolved as shift ('<' < ARITH_SHR).
    Conflict between rule 70 and token LOGIC_SHR resolved as shift ('<' < LOGIC_SHR).
    Conflict between rule 70 and token '?' resolved as reduce ('?' < '<').
    Conflict between rule 70 and token '^' resolved as reduce ('^' < '<').
    Conflict between rule 70 and token '&' resolved as reduce ('&' < '<').
    Conflict between rule 70 and token '>' resolved as reduce (%left '>').
    Conflict between rule 70 and token '<' resolved as reduce (%left '<').
    Conflict between rule 70 and token '+' resolved as shift ('<' < '+').
    Conflict between rule 70 and token '-' resolved as shift ('<' < '-').
    Conflict between rule 70 and token '*' resolved as shift ('<' < '*').
    Conflict between rule 70 and token '/' resolved as shift ('<' < '/').
    Conflict between rule 70 and token '%' resolved as shift ('<' < '%').
    Conflict between rule 70 and token '[' resolved as shift ('<' < '[').


State 268

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   61           | ExpressionNP '+' ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '@', '=', '}']
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER    shift, and go to state 163
    INT_DIV  shift, and go to state 164
    '*'      shift, and go to state 182
    '/'      shift, and go to state 183
    '%'      shift, and go to state 184
    '['      shift, and go to state 185

    $default  reduce using rule 61 (BinaryOpNP)

    Conflict between rule 61 and token POWER resolved as shift ('+' < POWER).
    Conflict between rule 61 and token INT_DIV resolved as shift ('+' < INT_DIV).
    Conflict between rule 61 and token LOGIC_OR resolved as reduce (LOGIC_OR < '+').
    Conflict between rule 61 and token LOGIC_AND resolved as reduce (LOGIC_AND < '+').
    Conflict between rule 61 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '+').
    Conflict between rule 61 and token CMP_GE resolved as reduce (CMP_GE < '+').
    Conflict between rule 61 and token CMP_LE resolved as reduce (CMP_LE < '+').
    Conflict between rule 61 and token CMP_EQ resolved as reduce (CMP_EQ < '+').
    Conflict between rule 61 and token CMP_NE resolved as reduce (CMP_NE < '+').
    Conflict between rule 61 and token SHL resolved as reduce (SHL < '+').
    Conflict between rule 61 and token ARITH_SHR resolved as reduce (ARITH_SHR < '+').
    Conflict between rule 61 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < '+').
    Conflict between rule 61 and token '?' resolved as reduce ('?' < '+').
    Conflict between rule 61 and token '^' resolved as reduce ('^' < '+').
    Conflict between rule 61 and token '&' resolved as reduce ('&' < '+').
    Conflict between rule 61 and token '>' resolved as reduce ('>' < '+').
    Conflict between rule 61 and token '<' resolved as reduce ('<' < '+').
    Conflict between rule 61 and token '+' resolved as reduce (%left '+').
    Conflict between rule 61 and token '-' resolved as reduce (%left '-').
    Conflict between rule 61 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 61 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 61 and token '%' resolved as shift ('+' < '%').
    Conflict between rule 61 and token '[' resolved as shift ('+' < '[').


State 269

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   62           | ExpressionNP '-' ExpressionNP •  [$end, NEWLINE, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '@', '=', '}']
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER    shift, and go to state 163
    INT_DIV  shift, and go to state 164
    '*'      shift, and go to state 182
    '/'      shift, and go to state 183
    '%'      shift, and go to state 184
    '['      shift, and go to state 185

    $default  reduce using rule 62 (BinaryOpNP)

    Conflict between rule 62 and token POWER resolved as shift ('-' < POWER).
    Conflict between rule 62 and token INT_DIV resolved as shift ('-' < INT_DIV).
    Conflict between rule 62 and token LOGIC_OR resolved as reduce (LOGIC_OR < '-').
    Conflict between rule 62 and token LOGIC_AND resolved as reduce (LOGIC_AND < '-').
    Conflict between rule 62 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '-').
    Conflict between rule 62 and token CMP_GE resolved as reduce (CMP_GE < '-').
    Conflict between rule 62 and token CMP_LE resolved as reduce (CMP_LE < '-').
    Conflict between rule 62 and token CMP_EQ resolved as reduce (CMP_EQ < '-').
    Conflict between rule 62 and token CMP_NE resolved as reduce (CMP_NE < '-').
    Conflict between rule 62 and token SHL resolved as reduce (SHL < '-').
    Conflict between rule 62 and token ARITH_SHR resolved as reduce (ARITH_SHR < '-').
    Conflict between rule 62 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < '-').
    Conflict between rule 62 and token '?' resolved as reduce ('?' < '-').
    Conflict between rule 62 and token '^' resolved as reduce ('^' < '-').
    Conflict between rule 62 and token '&' resolved as reduce ('&' < '-').
    Conflict between rule 62 and token '>' resolved as reduce ('>' < '-').
    Conflict between rule 62 and token '<' resolved as reduce ('<' < '-').
    Conflict between rule 62 and token '+' resolved as reduce (%left '+').
    Conflict between rule 62 and token '-' resolved as reduce (%left '-').
    Conflict between rule 62 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 62 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 62 and token '%' resolved as shift ('-' < '%').
    Conflict between rule 62 and token '[' resolved as shift ('-' < '[').


State 270

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   57           | ExpressionNP '*' ExpressionNP •  [$end, NEWLINE, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', '=', '}']
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER  shift, and go to state 163
    '['    shift, and go to state 185

    $default  reduce using rule 57 (BinaryOpNP)

    Conflict between rule 57 and token POWER resolved as shift ('*' < POWER).
    Conflict between rule 57 and token INT_DIV resolved as reduce (%left INT_DIV).
    Conflict between rule 57 and token LOGIC_OR resolved as reduce (LOGIC_OR < '*').
    Conflict between rule 57 and token LOGIC_AND resolved as reduce (LOGIC_AND < '*').
    Conflict between rule 57 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '*').
    Conflict between rule 57 and token CMP_GE resolved as reduce (CMP_GE < '*').
    Conflict between rule 57 and token CMP_LE resolved as reduce (CMP_LE < '*').
    Conflict between rule 57 and token CMP_EQ resolved as reduce (CMP_EQ < '*').
    Conflict between rule 57 and token CMP_NE resolved as reduce (CMP_NE < '*').
    Conflict between rule 57 and token SHL resolved as reduce (SHL < '*').
    Conflict between rule 57 and token ARITH_SHR resolved as reduce (ARITH_SHR < '*').
    Conflict between rule 57 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < '*').
    Conflict between rule 57 and token '?' resolved as reduce ('?' < '*').
    Conflict between rule 57 and token '^' resolved as reduce ('^' < '*').
    Conflict between rule 57 and token '&' resolved as reduce ('&' < '*').
    Conflict between rule 57 and token '>' resolved as reduce ('>' < '*').
    Conflict between rule 57 and token '<' resolved as reduce ('<' < '*').
    Conflict between rule 57 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 57 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 57 and token '*' resolved as reduce (%left '*').
    Conflict between rule 57 and token '/' resolved as reduce (%left '/').
    Conflict between rule 57 and token '%' resolved as reduce (%left '%').
    Conflict between rule 57 and token '[' resolved as shift ('*' < '[').


State 271

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   58           | ExpressionNP '/' ExpressionNP •  [$end, NEWLINE, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', '=', '}']
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER  shift, and go to state 163
    '['    shift, and go to state 185

    $default  reduce using rule 58 (BinaryOpNP)

    Conflict between rule 58 and token POWER resolved as shift ('/' < POWER).
    Conflict between rule 58 and token INT_DIV resolved as reduce (%left INT_DIV).
    Conflict between rule 58 and token LOGIC_OR resolved as reduce (LOGIC_OR < '/').
    Conflict between rule 58 and token LOGIC_AND resolved as reduce (LOGIC_AND < '/').
    Conflict between rule 58 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '/').
    Conflict between rule 58 and token CMP_GE resolved as reduce (CMP_GE < '/').
    Conflict between rule 58 and token CMP_LE resolved as reduce (CMP_LE < '/').
    Conflict between rule 58 and token CMP_EQ resolved as reduce (CMP_EQ < '/').
    Conflict between rule 58 and token CMP_NE resolved as reduce (CMP_NE < '/').
    Conflict between rule 58 and token SHL resolved as reduce (SHL < '/').
    Conflict between rule 58 and token ARITH_SHR resolved as reduce (ARITH_SHR < '/').
    Conflict between rule 58 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < '/').
    Conflict between rule 58 and token '?' resolved as reduce ('?' < '/').
    Conflict between rule 58 and token '^' resolved as reduce ('^' < '/').
    Conflict between rule 58 and token '&' resolved as reduce ('&' < '/').
    Conflict between rule 58 and token '>' resolved as reduce ('>' < '/').
    Conflict between rule 58 and token '<' resolved as reduce ('<' < '/').
    Conflict between rule 58 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 58 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 58 and token '*' resolved as reduce (%left '*').
    Conflict between rule 58 and token '/' resolved as reduce (%left '/').
    Conflict between rule 58 and token '%' resolved as reduce (%left '%').
    Conflict between rule 58 and token '[' resolved as shift ('/' < '[').


State 272

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   60           | ExpressionNP '%' ExpressionNP •  [$end, NEWLINE, INT_DIV, LOGIC_OR, LOGIC_AND, LOGIC_XOR, CMP_GE, CMP_LE, CMP_EQ, CMP_NE, SHL, ARITH_SHR, LOGIC_SHR, ',', ':', '?', '|', '^', '&', '>', '<', '+', '-', '*', '/', '%', '@', '=', '}']
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP

    POWER  shift, and go to state 163
    '['    shift, and go to state 185

    $default  reduce using rule 60 (BinaryOpNP)

    Conflict between rule 60 and token POWER resolved as shift ('%' < POWER).
    Conflict between rule 60 and token INT_DIV resolved as reduce (%left INT_DIV).
    Conflict between rule 60 and token LOGIC_OR resolved as reduce (LOGIC_OR < '%').
    Conflict between rule 60 and token LOGIC_AND resolved as reduce (LOGIC_AND < '%').
    Conflict between rule 60 and token LOGIC_XOR resolved as reduce (LOGIC_XOR < '%').
    Conflict between rule 60 and token CMP_GE resolved as reduce (CMP_GE < '%').
    Conflict between rule 60 and token CMP_LE resolved as reduce (CMP_LE < '%').
    Conflict between rule 60 and token CMP_EQ resolved as reduce (CMP_EQ < '%').
    Conflict between rule 60 and token CMP_NE resolved as reduce (CMP_NE < '%').
    Conflict between rule 60 and token SHL resolved as reduce (SHL < '%').
    Conflict between rule 60 and token ARITH_SHR resolved as reduce (ARITH_SHR < '%').
    Conflict between rule 60 and token LOGIC_SHR resolved as reduce (LOGIC_SHR < '%').
    Conflict between rule 60 and token '?' resolved as reduce ('?' < '%').
    Conflict between rule 60 and token '^' resolved as reduce ('^' < '%').
    Conflict between rule 60 and token '&' resolved as reduce ('&' < '%').
    Conflict between rule 60 and token '>' resolved as reduce ('>' < '%').
    Conflict between rule 60 and token '<' resolved as reduce ('<' < '%').
    Conflict between rule 60 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 60 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 60 and token '*' resolved as reduce (%left '*').
    Conflict between rule 60 and token '/' resolved as reduce (%left '/').
    Conflict between rule 60 and token '%' resolved as reduce (%left '%').
    Conflict between rule 60 and token '[' resolved as shift ('%' < '[').


State 273

   23 IndexList: IndexList • ',' IndexEntry
   26 IndexNP: ExpressionNP '[' IndexList • ']'

    ','  shift, and go to state 286
    ']'  shift, and go to state 299


State 274

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP
  114 Instruction: SET ExpressionNP '=' ExpressionNP •  [$end, NEWLINE, '|', '@', '}']

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    LOGIC_OR   shift, and go to state 165
    LOGIC_AND  shift, and go to state 166
    LOGIC_XOR  shift, and go to state 167
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '?'        shift, and go to state 175
    '^'        shift, and go to state 176
    '&'        shift, and go to state 177
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 114 (Instruction)


State 275

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  130 Subcircuit: '.' Identifier '(' Expression • ')'

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142
    ')'        shift, and go to state 300


State 276

    1 Newline: Newline • NEWLINE
    3 OptNewline: Newline •  ['}']
   16 Identifier: • IDENTIFIER
  112 Instruction: • Identifier
  113            | • Identifier ExpressionListNP
  114            | • SET ExpressionNP '=' ExpressionNP
  115            | • CDASH Identifier ExpressionNP
  116            | • CDASH Identifier ExpressionNP ',' ExpressionListNP
  117            | • COND '(' Expression ')' Identifier ExpressionListNP
  118 AnnotInstr: • AnnotInstr '@' AnnotationData
  119           | • Instruction
  120 SLParInstrList: • SLParInstrList '|' AnnotInstr
  121               | • AnnotInstr
  122 CBParInstrList: CBParInstrList Newline • SLParInstrList

    NEWLINE     shift, and go to state 7
    CDASH       shift, and go to state 22
    COND        shift, and go to state 23
    SET         shift, and go to state 31
    IDENTIFIER  shift, and go to state 32

    $default  reduce using rule 3 (OptNewline)

    Identifier      go to state 35
    Instruction     go to state 36
    AnnotInstr      go to state 37
    SLParInstrList  go to state 301


State 277

  149 Statement: '{' OptNewline CBParInstrList OptNewline • '}'

    '}'  shift, and go to state 302


State 278

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP
  106 ExpressionListNP: ExpressionListNP ',' ExpressionNP •  [$end, NEWLINE, ',', '|', '@', '}']

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    LOGIC_OR   shift, and go to state 165
    LOGIC_AND  shift, and go to state 166
    LOGIC_XOR  shift, and go to state 167
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '?'        shift, and go to state 175
    '^'        shift, and go to state 176
    '&'        shift, and go to state 177
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 106 (ExpressionListNP)


State 279

   16 Identifier: • IDENTIFIER
  108 AnnotationName: Identifier '.' • Identifier

    IDENTIFIER  shift, and go to state 32

    Identifier  go to state 303


State 280

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  104 ExpressionList: • ExpressionList ',' Expression
  105               | • Expression
  110 AnnotationData: AnnotationName '(' • ')'
  111               | AnnotationName '(' • ExpressionList ')'

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    ')'            shift, and go to state 304
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 204
    ExpressionList  go to state 305


State 281

    1 Newline: Newline • NEWLINE
    3 OptNewline: Newline •  [']']
    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    7 MatrixRows: MatrixRows Newline • ExpressionList
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  104 ExpressionList: • ExpressionList ',' Expression
  105               | • Expression

    error          shift, and go to state 52
    NEWLINE        shift, and go to state 7
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    ']'  reduce using rule 3 (OptNewline)

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 204
    ExpressionList  go to state 306


State 282

    9 MatrixLiteral: '[' OptNewline MatrixRows OptNewline • ']'

    ']'  shift, and go to state 307


State 283

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  104 ExpressionList: ExpressionList ',' • Expression

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 308


State 284

   18 FunctionCall: Identifier '(' ExpressionList ')' •

    $default  reduce using rule 18 (FunctionCall)


State 285

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   52          | Expression '?' Expression ':' • Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 309


State 286

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   19 IndexItem: • Expression
   20 IndexRange: • Expression ':' Expression
   21 IndexEntry: • IndexItem
   22           | • IndexRange
   23 IndexList: IndexList ',' • IndexEntry
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    IndexItem       go to state 231
    IndexRange      go to state 232
    IndexEntry      go to state 310
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 235


State 287

   25 Index: Expression '[' IndexList ']' •

    $default  reduce using rule 25 (Index)


State 288

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   20 IndexRange: Expression ':' • Expression
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 311


State 289

  106 ExpressionListNP: ExpressionListNP • ',' ExpressionNP
  116 Instruction: CDASH Identifier ExpressionNP ',' ExpressionListNP •  [$end, NEWLINE, '|', '@', '}']

    ','  shift, and go to state 190

    $default  reduce using rule 116 (Instruction)


State 290

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error
  106 ExpressionListNP: • ExpressionListNP ',' ExpressionNP
  107                 | • ExpressionNP
  117 Instruction: COND '(' Expression ')' Identifier • ExpressionListNP

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral    go to state 90
    FloatLiteral      go to state 91
    MatrixLiteral     go to state 92
    StringLiteral     go to state 93
    JsonLiteral       go to state 94
    Identifier        go to state 95
    FunctionCall      go to state 96
    IndexNP           go to state 97
    UnaryOpNP         go to state 98
    BinaryOpNP        go to state 99
    TernaryOpNP       go to state 100
    ExpressionNP      go to state 104
    ExpressionListNP  go to state 312


State 291

  136 IfElse: IF '(' Expression ')' SubStatements •  [$end, NEWLINE, '@', '}']
  137       | IF '(' Expression ')' SubStatements • ELSE IfElse
  138       | IF '(' Expression ')' SubStatements • ELSE SubStatements

    ELSE  shift, and go to state 313

    $default  reduce using rule 136 (IfElse)


State 292

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  133 Assignment: Expression '=' Expression •  [NEWLINE, ')']

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 133 (Assignment)


State 293

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  139 ForLoop: FOR '(' OptAssignment NEWLINE Expression • NEWLINE OptAssignment ')' SubStatements

    NEWLINE    shift, and go to state 314
    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142


State 294

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  140 ForeachLoop: FOREACH '(' Expression '=' Expression • ELLIPSIS Expression ')' SubStatements

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    ELLIPSIS   shift, and go to state 315
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142


State 295

  141 WhileLoop: WHILE '(' Expression ')' SubStatements •

    $default  reduce using rule 141 (WhileLoop)


State 296

  131 SubStatements: '{' OptNewline StatementList OptNewline • '}'

    '}'  shift, and go to state 316


State 297

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  142 RepeatUntilLoop: REPEAT SubStatements UNTIL '(' Expression • ')'

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142
    ')'        shift, and go to state 317


State 298

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   26 IndexNP: • ExpressionNP '[' IndexList ']'
   53 UnaryOpNP: • '-' ExpressionNP
   54          | • '~' ExpressionNP
   55          | • '!' ExpressionNP
   56 BinaryOpNP: • ExpressionNP POWER ExpressionNP
   57           | • ExpressionNP '*' ExpressionNP
   58           | • ExpressionNP '/' ExpressionNP
   59           | • ExpressionNP INT_DIV ExpressionNP
   60           | • ExpressionNP '%' ExpressionNP
   61           | • ExpressionNP '+' ExpressionNP
   62           | • ExpressionNP '-' ExpressionNP
   63           | • ExpressionNP SHL ExpressionNP
   64           | • ExpressionNP ARITH_SHR ExpressionNP
   65           | • ExpressionNP LOGIC_SHR ExpressionNP
   66           | • ExpressionNP CMP_EQ ExpressionNP
   67           | • ExpressionNP CMP_NE ExpressionNP
   68           | • ExpressionNP '>' ExpressionNP
   69           | • ExpressionNP CMP_GE ExpressionNP
   70           | • ExpressionNP '<' ExpressionNP
   71           | • ExpressionNP CMP_LE ExpressionNP
   72           | • ExpressionNP '&' ExpressionNP
   73           | • ExpressionNP '^' ExpressionNP
   74           | • ExpressionNP LOGIC_AND ExpressionNP
   75           | • ExpressionNP LOGIC_XOR ExpressionNP
   76           | • ExpressionNP LOGIC_OR ExpressionNP
   77 TernaryOpNP: • ExpressionNP '?' ExpressionNP ':' ExpressionNP
   77            | ExpressionNP '?' ExpressionNP ':' • ExpressionNP
   91 ExpressionNP: • IntegerLiteral
   92             | • FloatLiteral
   93             | • MatrixLiteral
   94             | • StringLiteral
   95             | • JsonLiteral
   96             | • Identifier
   97             | • FunctionCall
   98             | • IndexNP
   99             | • UnaryOpNP
  100             | • BinaryOpNP
  101             | • TernaryOpNP
  102             | • '(' Expression ')'
  103             | • error

    error          shift, and go to state 85
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 86
    '('            shift, and go to state 87
    '['            shift, and go to state 58
    '~'            shift, and go to state 88
    '!'            shift, and go to state 89

    IntegerLiteral  go to state 90
    FloatLiteral    go to state 91
    MatrixLiteral   go to state 92
    StringLiteral   go to state 93
    JsonLiteral     go to state 94
    Identifier      go to state 95
    FunctionCall    go to state 96
    IndexNP         go to state 97
    UnaryOpNP       go to state 98
    BinaryOpNP      go to state 99
    TernaryOpNP     go to state 100
    ExpressionNP    go to state 318


State 299

   26 IndexNP: ExpressionNP '[' IndexList ']' •

    $default  reduce using rule 26 (IndexNP)


State 300

  130 Subcircuit: '.' Identifier '(' Expression ')' •

    $default  reduce using rule 130 (Subcircuit)


State 301

  120 SLParInstrList: SLParInstrList • '|' AnnotInstr
  122 CBParInstrList: CBParInstrList Newline SLParInstrList •  [NEWLINE, '}']

    '|'  shift, and go to state 107

    $default  reduce using rule 122 (CBParInstrList)


State 302

  149 Statement: '{' OptNewline CBParInstrList OptNewline '}' •

    $default  reduce using rule 149 (Statement)


State 303

  108 AnnotationName: Identifier '.' Identifier •

    $default  reduce using rule 108 (AnnotationName)


State 304

  110 AnnotationData: AnnotationName '(' ')' •

    $default  reduce using rule 110 (AnnotationData)


State 305

  104 ExpressionList: ExpressionList • ',' Expression
  111 AnnotationData: AnnotationName '(' ExpressionList • ')'

    ','  shift, and go to state 283
    ')'  shift, and go to state 319


State 306

    7 MatrixRows: MatrixRows Newline ExpressionList •  [NEWLINE, ']']
  104 ExpressionList: ExpressionList • ',' Expression

    ','  shift, and go to state 283

    $default  reduce using rule 7 (MatrixRows)


State 307

    9 MatrixLiteral: '[' OptNewline MatrixRows OptNewline ']' •

    $default  reduce using rule 9 (MatrixLiteral)


State 308

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  104 ExpressionList: ExpressionList ',' Expression •  [NEWLINE, ',', ']', ')']

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 104 (ExpressionList)


State 309

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
   52          | Expression '?' Expression ':' Expression •  [$end, NEWLINE, ELLIPSIS, ',', ':', '@', ']', ')', '=', '}']

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 52 (TernaryOp)

    Conflict between rule 52 and token POWER resolved as shift (':' < POWER).
    Conflict between rule 52 and token INT_DIV resolved as shift (':' < INT_DIV).
    Conflict between rule 52 and token LOGIC_OR resolved as shift (':' < LOGIC_OR).
    Conflict between rule 52 and token LOGIC_AND resolved as shift (':' < LOGIC_AND).
    Conflict between rule 52 and token LOGIC_XOR resolved as shift (':' < LOGIC_XOR).
    Conflict between rule 52 and token CMP_GE resolved as shift (':' < CMP_GE).
    Conflict between rule 52 and token CMP_LE resolved as shift (':' < CMP_LE).
    Conflict between rule 52 and token CMP_EQ resolved as shift (':' < CMP_EQ).
    Conflict between rule 52 and token CMP_NE resolved as shift (':' < CMP_NE).
    Conflict between rule 52 and token SHL resolved as shift (':' < SHL).
    Conflict between rule 52 and token ARITH_SHR resolved as shift (':' < ARITH_SHR).
    Conflict between rule 52 and token LOGIC_SHR resolved as shift (':' < LOGIC_SHR).
    Conflict between rule 52 and token '?' resolved as shift (':' < '?').
    Conflict between rule 52 and token '|' resolved as shift (':' < '|').
    Conflict between rule 52 and token '^' resolved as shift (':' < '^').
    Conflict between rule 52 and token '&' resolved as shift (':' < '&').
    Conflict between rule 52 and token '>' resolved as shift (':' < '>').
    Conflict between rule 52 and token '<' resolved as shift (':' < '<').
    Conflict between rule 52 and token '+' resolved as shift (':' < '+').
    Conflict between rule 52 and token '-' resolved as shift (':' < '-').
    Conflict between rule 52 and token '*' resolved as shift (':' < '*').
    Conflict between rule 52 and token '/' resolved as shift (':' < '/').
    Conflict between rule 52 and token '%' resolved as shift (':' < '%').
    Conflict between rule 52 and token '[' resolved as shift (':' < '[').


State 310

   23 IndexList: IndexList ',' IndexEntry •

    $default  reduce using rule 23 (IndexList)


State 311

   20 IndexRange: Expression ':' Expression •  [',', ']']
   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142

    $default  reduce using rule 20 (IndexRange)


State 312

  106 ExpressionListNP: ExpressionListNP • ',' ExpressionNP
  117 Instruction: COND '(' Expression ')' Identifier ExpressionListNP •  [$end, NEWLINE, '|', '@', '}']

    ','  shift, and go to state 190

    $default  reduce using rule 117 (Instruction)


State 313

  131 SubStatements: • '{' OptNewline StatementList OptNewline '}'
  132              | • '{' OptNewline '}'
  136 IfElse: • IF '(' Expression ')' SubStatements
  137       | • IF '(' Expression ')' SubStatements ELSE IfElse
  137       | IF '(' Expression ')' SubStatements ELSE • IfElse
  138       | • IF '(' Expression ')' SubStatements ELSE SubStatements
  138       | IF '(' Expression ')' SubStatements ELSE • SubStatements

    IF   shift, and go to state 24
    '{'  shift, and go to state 83

    SubStatements  go to state 320
    IfElse         go to state 321


State 314

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  133 Assignment: • Expression '=' Expression
  134 OptAssignment: • Assignment
  135              | ε •  [')']
  139 ForLoop: FOR '(' OptAssignment NEWLINE Expression NEWLINE • OptAssignment ')' SubStatements

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    ')'  reduce using rule 135 (OptAssignment)

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 152
    Assignment      go to state 153
    OptAssignment   go to state 322


State 315

    5 IntegerLiteral: • INT_LITERAL
    6 FloatLiteral: • FLOAT_LITERAL
    9 MatrixLiteral: • '[' OptNewline MatrixRows OptNewline ']'
   10              | • '[' OptNewline ']'
   14 StringLiteral: • STRING_OPEN StringBuilder STRING_CLOSE
   15 JsonLiteral: • JSON_OPEN StringBuilder JSON_CLOSE
   16 Identifier: • IDENTIFIER
   17 FunctionCall: • Identifier '(' ')'
   18             | • Identifier '(' ExpressionList ')'
   25 Index: • Expression '[' IndexList ']'
   27 UnaryOp: • '-' Expression
   28        | • '~' Expression
   29        | • '!' Expression
   30 BinaryOp: • Expression POWER Expression
   31         | • Expression '*' Expression
   32         | • Expression '/' Expression
   33         | • Expression INT_DIV Expression
   34         | • Expression '%' Expression
   35         | • Expression '+' Expression
   36         | • Expression '-' Expression
   37         | • Expression SHL Expression
   38         | • Expression ARITH_SHR Expression
   39         | • Expression LOGIC_SHR Expression
   40         | • Expression CMP_EQ Expression
   41         | • Expression CMP_NE Expression
   42         | • Expression '>' Expression
   43         | • Expression CMP_GE Expression
   44         | • Expression '<' Expression
   45         | • Expression CMP_LE Expression
   46         | • Expression '&' Expression
   47         | • Expression '^' Expression
   48         | • Expression '|' Expression
   49         | • Expression LOGIC_AND Expression
   50         | • Expression LOGIC_XOR Expression
   51         | • Expression LOGIC_OR Expression
   52 TernaryOp: • Expression '?' Expression ':' Expression
   78 Expression: • IntegerLiteral
   79           | • FloatLiteral
   80           | • MatrixLiteral
   81           | • StringLiteral
   82           | • JsonLiteral
   83           | • Identifier
   84           | • FunctionCall
   85           | • Index
   86           | • UnaryOp
   87           | • BinaryOp
   88           | • TernaryOp
   89           | • '(' Expression ')'
   90           | • error
  140 ForeachLoop: FOREACH '(' Expression '=' Expression ELLIPSIS • Expression ')' SubStatements

    error          shift, and go to state 52
    INT_LITERAL    shift, and go to state 10
    FLOAT_LITERAL  shift, and go to state 53
    STRING_OPEN    shift, and go to state 54
    JSON_OPEN      shift, and go to state 55
    IDENTIFIER     shift, and go to state 32
    '-'            shift, and go to state 56
    '('            shift, and go to state 57
    '['            shift, and go to state 58
    '~'            shift, and go to state 59
    '!'            shift, and go to state 60

    IntegerLiteral  go to state 61
    FloatLiteral    go to state 62
    MatrixLiteral   go to state 63
    StringLiteral   go to state 64
    JsonLiteral     go to state 65
    Identifier      go to state 66
    FunctionCall    go to state 67
    Index           go to state 68
    UnaryOp         go to state 69
    BinaryOp        go to state 70
    TernaryOp       go to state 71
    Expression      go to state 323


State 316

  131 SubStatements: '{' OptNewline StatementList OptNewline '}' •

    $default  reduce using rule 131 (SubStatements)


State 317

  142 RepeatUntilLoop: REPEAT SubStatements UNTIL '(' Expression ')' •

    $default  reduce using rule 142 (RepeatUntilLoop)


State 318

   26 IndexNP: ExpressionNP • '[' IndexList ']'
   56 BinaryOpNP: ExpressionNP • POWER ExpressionNP
   57           | ExpressionNP • '*' ExpressionNP
   58           | ExpressionNP • '/' ExpressionNP
   59           | ExpressionNP • INT_DIV ExpressionNP
   60           | ExpressionNP • '%' ExpressionNP
   61           | ExpressionNP • '+' ExpressionNP
   62           | ExpressionNP • '-' ExpressionNP
   63           | ExpressionNP • SHL ExpressionNP
   64           | ExpressionNP • ARITH_SHR ExpressionNP
   65           | ExpressionNP • LOGIC_SHR ExpressionNP
   66           | ExpressionNP • CMP_EQ ExpressionNP
   67           | ExpressionNP • CMP_NE ExpressionNP
   68           | ExpressionNP • '>' ExpressionNP
   69           | ExpressionNP • CMP_GE ExpressionNP
   70           | ExpressionNP • '<' ExpressionNP
   71           | ExpressionNP • CMP_LE ExpressionNP
   72           | ExpressionNP • '&' ExpressionNP
   73           | ExpressionNP • '^' ExpressionNP
   74           | ExpressionNP • LOGIC_AND ExpressionNP
   75           | ExpressionNP • LOGIC_XOR ExpressionNP
   76           | ExpressionNP • LOGIC_OR ExpressionNP
   77 TernaryOpNP: ExpressionNP • '?' ExpressionNP ':' ExpressionNP
   77            | ExpressionNP '?' ExpressionNP ':' ExpressionNP •  [$end, NEWLINE, ',', ':', '|', '@', '=', '}']

    POWER      shift, and go to state 163
    INT_DIV    shift, and go to state 164
    LOGIC_OR   shift, and go to state 165
    LOGIC_AND  shift, and go to state 166
    LOGIC_XOR  shift, and go to state 167
    CMP_GE     shift, and go to state 168
    CMP_LE     shift, and go to state 169
    CMP_EQ     shift, and go to state 170
    CMP_NE     shift, and go to state 171
    SHL        shift, and go to state 172
    ARITH_SHR  shift, and go to state 173
    LOGIC_SHR  shift, and go to state 174
    '?'        shift, and go to state 175
    '^'        shift, and go to state 176
    '&'        shift, and go to state 177
    '>'        shift, and go to state 178
    '<'        shift, and go to state 179
    '+'        shift, and go to state 180
    '-'        shift, and go to state 181
    '*'        shift, and go to state 182
    '/'        shift, and go to state 183
    '%'        shift, and go to state 184
    '['        shift, and go to state 185

    $default  reduce using rule 77 (TernaryOpNP)

    Conflict between rule 77 and token POWER resolved as shift (':' < POWER).
    Conflict between rule 77 and token INT_DIV resolved as shift (':' < INT_DIV).
    Conflict between rule 77 and token LOGIC_OR resolved as shift (':' < LOGIC_OR).
    Conflict between rule 77 and token LOGIC_AND resolved as shift (':' < LOGIC_AND).
    Conflict between rule 77 and token LOGIC_XOR resolved as shift (':' < LOGIC_XOR).
    Conflict between rule 77 and token CMP_GE resolved as shift (':' < CMP_GE).
    Conflict between rule 77 and token CMP_LE resolved as shift (':' < CMP_LE).
    Conflict between rule 77 and token CMP_EQ resolved as shift (':' < CMP_EQ).
    Conflict between rule 77 and token CMP_NE resolved as shift (':' < CMP_NE).
    Conflict between rule 77 and token SHL resolved as shift (':' < SHL).
    Conflict between rule 77 and token ARITH_SHR resolved as shift (':' < ARITH_SHR).
    Conflict between rule 77 and token LOGIC_SHR resolved as shift (':' < LOGIC_SHR).
    Conflict between rule 77 and token '?' resolved as shift (':' < '?').
    Conflict between rule 77 and token '^' resolved as shift (':' < '^').
    Conflict between rule 77 and token '&' resolved as shift (':' < '&').
    Conflict between rule 77 and token '>' resolved as shift (':' < '>').
    Conflict between rule 77 and token '<' resolved as shift (':' < '<').
    Conflict between rule 77 and token '+' resolved as shift (':' < '+').
    Conflict between rule 77 and token '-' resolved as shift (':' < '-').
    Conflict between rule 77 and token '*' resolved as shift (':' < '*').
    Conflict between rule 77 and token '/' resolved as shift (':' < '/').
    Conflict between rule 77 and token '%' resolved as shift (':' < '%').
    Conflict between rule 77 and token '[' resolved as shift (':' < '[').


State 319

  111 AnnotationData: AnnotationName '(' ExpressionList ')' •

    $default  reduce using rule 111 (AnnotationData)


State 320

  138 IfElse: IF '(' Expression ')' SubStatements ELSE SubStatements •

    $default  reduce using rule 138 (IfElse)


State 321

  137 IfElse: IF '(' Expression ')' SubStatements ELSE IfElse •

    $default  reduce using rule 137 (IfElse)


State 322

  139 ForLoop: FOR '(' OptAssignment NEWLINE Expression NEWLINE OptAssignment • ')' SubStatements

    ')'  shift, and go to state 324


State 323

   25 Index: Expression • '[' IndexList ']'
   30 BinaryOp: Expression • POWER Expression
   31         | Expression • '*' Expression
   32         | Expression • '/' Expression
   33         | Expression • INT_DIV Expression
   34         | Expression • '%' Expression
   35         | Expression • '+' Expression
   36         | Expression • '-' Expression
   37         | Expression • SHL Expression
   38         | Expression • ARITH_SHR Expression
   39         | Expression • LOGIC_SHR Expression
   40         | Expression • CMP_EQ Expression
   41         | Expression • CMP_NE Expression
   42         | Expression • '>' Expression
   43         | Expression • CMP_GE Expression
   44         | Expression • '<' Expression
   45         | Expression • CMP_LE Expression
   46         | Expression • '&' Expression
   47         | Expression • '^' Expression
   48         | Expression • '|' Expression
   49         | Expression • LOGIC_AND Expression
   50         | Expression • LOGIC_XOR Expression
   51         | Expression • LOGIC_OR Expression
   52 TernaryOp: Expression • '?' Expression ':' Expression
  140 ForeachLoop: FOREACH '(' Expression '=' Expression ELLIPSIS Expression • ')' SubStatements

    POWER      shift, and go to state 119
    INT_DIV    shift, and go to state 120
    LOGIC_OR   shift, and go to state 121
    LOGIC_AND  shift, and go to state 122
    LOGIC_XOR  shift, and go to state 123
    CMP_GE     shift, and go to state 124
    CMP_LE     shift, and go to state 125
    CMP_EQ     shift, and go to state 126
    CMP_NE     shift, and go to state 127
    SHL        shift, and go to state 128
    ARITH_SHR  shift, and go to state 129
    LOGIC_SHR  shift, and go to state 130
    '?'        shift, and go to state 131
    '|'        shift, and go to state 132
    '^'        shift, and go to state 133
    '&'        shift, and go to state 134
    '>'        shift, and go to state 135
    '<'        shift, and go to state 136
    '+'        shift, and go to state 137
    '-'        shift, and go to state 138
    '*'        shift, and go to state 139
    '/'        shift, and go to state 140
    '%'        shift, and go to state 141
    '['        shift, and go to state 142
    ')'        shift, and go to state 325


State 324

  131 SubStatements: • '{' OptNewline StatementList OptNewline '}'
  132              | • '{' OptNewline '}'
  139 ForLoop: FOR '(' OptAssignment NEWLINE Expression NEWLINE OptAssignment ')' • SubStatements

    '{'  shift, and go to state 83

    SubStatements  go to state 326


State 325

  131 SubStatements: • '{' OptNewline StatementList OptNewline '}'
  132              | • '{' OptNewline '}'
  140 ForeachLoop: FOREACH '(' Expression '=' Expression ELLIPSIS Expression ')' • SubStatements

    '{'  shift, and go to state 83

    SubStatements  go to state 327


State 326

  139 ForLoop: FOR '(' OptAssignment NEWLINE Expression NEWLINE OptAssignment ')' SubStatements •

    $default  reduce using rule 139 (ForLoop)


State 327

  140 ForeachLoop: FOREACH '(' Expression '=' Expression ELLIPSIS Expression ')' SubStatements •

    $default  reduce using rule 140 (ForeachLoop)
